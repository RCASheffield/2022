
TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  08005da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005da4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d0f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee3  00000000  00000000  00037da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0003ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b462  00000000  00000000  0003d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001467e  00000000  00000000  0005895a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f112  00000000  00000000  0006cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d24  00000000  00000000  0010c13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bf0 	.word	0x08005bf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005bf0 	.word	0x08005bf0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__aeabi_f2iz>:
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a9c:	d30f      	bcc.n	8000abe <__aeabi_f2iz+0x2a>
 8000a9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_f2iz+0x30>
 8000aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab8:	bf18      	it	ne
 8000aba:	4240      	negne	r0, r0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr
 8000ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac8:	d101      	bne.n	8000ace <__aeabi_f2iz+0x3a>
 8000aca:	0242      	lsls	r2, r0, #9
 8000acc:	d105      	bne.n	8000ada <__aeabi_f2iz+0x46>
 8000ace:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ad2:	bf08      	it	eq
 8000ad4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <HAL_TIM_IC_CaptureCallback>:
int16_t position; // used in UserCode0 of stm32f1xx_it.c
float speed = 0;
float rpm = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000af0:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000afa:	801a      	strh	r2, [r3, #0]
	position = count;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000afe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000b04:	801a      	strh	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000240 	.word	0x20000240
 8000b14:	20000244 	.word	0x20000244
 8000b18:	20000246 	.word	0x20000246

08000b1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == INDEX_Pin)
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b2c:	d105      	bne.n	8000b3a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		revolutions++;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b38:	801a      	strh	r2, [r3, #0]
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	2000023c 	.word	0x2000023c

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f001 fd9e 	bl	800268c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f822 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 fa6c 	bl	8001030 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b58:	f000 fa40 	bl	8000fdc <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000b5c:	f000 f8f4 	bl	8000d48 <MX_CAN_Init>
  MX_ADC1_Init();
 8000b60:	f000 f876 	bl	8000c50 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b64:	f000 f972 	bl	8000e4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b68:	f000 f9c8 	bl	8000efc <MX_TIM3_Init>
  MX_I2C2_Init();
 8000b6c:	f000 f940 	bl	8000df0 <MX_I2C2_Init>
  MX_ADC2_Init();
 8000b70:	f000 f8ac 	bl	8000ccc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // Activate the encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <main+0x48>)
 8000b78:	f004 f87b 	bl	8004c72 <HAL_TIM_Encoder_Start_IT>

  init_modules(&huart2);
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <main+0x4c>)
 8000b7e:	f000 fe51 	bl	8001824 <init_modules>
  mainboard();
 8000b82:	f000 fe85 	bl	8001890 <mainboard>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fde2 	bl	8002750 <HAL_Delay>
 8000b8c:	e7fb      	b.n	8000b86 <main+0x3e>
 8000b8e:	bf00      	nop
 8000b90:	20000168 	.word	0x20000168
 8000b94:	200001f8 	.word	0x200001f8

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 ffc4 	bl	8005b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000be4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fa7e 	bl	80040f0 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bfa:	f000 fac7 	bl	800118c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fcea 	bl	80045f4 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c26:	f000 fab1 	bl	800118c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fe74 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c42:	f000 faa3 	bl	800118c <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3750      	adds	r7, #80	; 0x50
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <MX_ADC1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000c8e:	f001 fd83 	bl	8002798 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 fa78 	bl	800118c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC1_Init+0x74>)
 8000cae:	f001 fe4b 	bl	8002948 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cb8:	f000 fa68 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	40012400 	.word	0x40012400

08000ccc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <MX_ADC2_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000cf6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cfa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000d0a:	f001 fd45 	bl	8002798 <HAL_ADC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 fa3a 	bl	800118c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_ADC2_Init+0x74>)
 8000d2a:	f001 fe0d 	bl	8002948 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d34:	f000 fa2a 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000bc 	.word	0x200000bc
 8000d44:	40012800 	.word	0x40012800

08000d48 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <MX_CAN_Init+0xa4>)
 8000d52:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d56:	2210      	movs	r2, #16
 8000d58:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d6e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d9a:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000d9c:	f001 ff0d 	bl	8002bba <HAL_CAN_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000da6:	f000 f9f1 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000dae:	230a      	movs	r3, #10
 8000db0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8000db6:	f242 0360 	movw	r3, #8288	; 0x2060
 8000dba:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8000dc0:	f242 0360 	movw	r3, #8288	; 0x2060
 8000dc4:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_CAN_Init+0xa0>)
 8000ddc:	f001 ffe8 	bl	8002db0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000ec 	.word	0x200000ec
 8000dec:	40006400 	.word	0x40006400

08000df0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_I2C2_Init+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_I2C2_Init+0x58>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_I2C2_Init+0x50>)
 8000e2e:	f003 f81b 	bl	8003e68 <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e38:	f000 f9a8 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000114 	.word	0x20000114
 8000e44:	40005800 	.word	0x40005800
 8000e48:	000186a0 	.word	0x000186a0

08000e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2224      	movs	r2, #36	; 0x24
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fe6a 	bl	8005b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <MX_TIM1_Init+0xac>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000ec0:	f003 fe35 	bl	8004b2e <HAL_TIM_Encoder_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000eca:	f000 f95f 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM1_Init+0xa8>)
 8000edc:	f004 fb70 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000ee6:	f000 f951 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000168 	.word	0x20000168
 8000ef8:	40012c00 	.word	0x40012c00

08000efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f20:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <MX_TIM3_Init+0xdc>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f46:	f003 fda3 	bl	8004a90 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 f91c 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4619      	mov	r1, r3
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f64:	f004 fb2c 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f6e:	f000 f90d 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	4619      	mov	r1, r3
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000f8a:	f004 f829 	bl	8004fe0 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f94:	f000 f8fa 	bl	800118c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000fa0:	f004 f81e 	bl	8004fe0 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f000 f8ef 	bl	800118c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000fb6:	f004 f813 	bl	8004fe0 <HAL_TIM_PWM_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000fc0:	f000 f8e4 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM3_Init+0xd8>)
 8000fc6:	f001 fa0f 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	40000400 	.word	0x40000400

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_USART2_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001014:	f004 fb44 	bl	80056a0 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101e:	f000 f8b5 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001f8 	.word	0x200001f8
 800102c:	40004400 	.word	0x40004400

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <MX_GPIO_Init+0x148>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <MX_GPIO_Init+0x148>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b49      	ldr	r3, [pc, #292]	; (8001178 <MX_GPIO_Init+0x148>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b46      	ldr	r3, [pc, #280]	; (8001178 <MX_GPIO_Init+0x148>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a45      	ldr	r2, [pc, #276]	; (8001178 <MX_GPIO_Init+0x148>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b43      	ldr	r3, [pc, #268]	; (8001178 <MX_GPIO_Init+0x148>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <MX_GPIO_Init+0x148>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <MX_GPIO_Init+0x148>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <MX_GPIO_Init+0x148>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <MX_GPIO_Init+0x148>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a39      	ldr	r2, [pc, #228]	; (8001178 <MX_GPIO_Init+0x148>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b37      	ldr	r3, [pc, #220]	; (8001178 <MX_GPIO_Init+0x148>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOCO_TX_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2122      	movs	r1, #34	; 0x22
 80010a8:	4834      	ldr	r0, [pc, #208]	; (800117c <MX_GPIO_Init+0x14c>)
 80010aa:	f002 feac 	bl	8003e06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLOSE_INTERLOCK_TRIGGER_Pin|HORN_CONTROL_Pin|BRAKE_CONTROL_Pin|RELAY_ENABLE_Pin
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 61ce 	mov.w	r1, #1648	; 0x670
 80010b4:	4832      	ldr	r0, [pc, #200]	; (8001180 <MX_GPIO_Init+0x150>)
 80010b6:	f002 fea6 	bl	8003e06 <HAL_GPIO_WritePin>
                          |RELAY_SELECT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VARIANT_INDICATOR_Pin VINT_PRESENT_Pin ESTOP2_PRESENT_Pin ESTOP1_PRESENT_Pin
                           INTERLOCK_IN_PRESENT_Pin BRAKE_OVERCURRENT_Pin BRAKE_UNDERCURRENT_Pin RELAY_OVERCURRENT_Pin
                           RELAY_UNDERCURRENT_Pin */
  GPIO_InitStruct.Pin = VARIANT_INDICATOR_Pin|VINT_PRESENT_Pin|ESTOP2_PRESENT_Pin|ESTOP1_PRESENT_Pin
 80010ba:	f643 138f 	movw	r3, #14735	; 0x398f
 80010be:	613b      	str	r3, [r7, #16]
                          |INTERLOCK_IN_PRESENT_Pin|BRAKE_OVERCURRENT_Pin|BRAKE_UNDERCURRENT_Pin|RELAY_OVERCURRENT_Pin
                          |RELAY_UNDERCURRENT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	482c      	ldr	r0, [pc, #176]	; (8001180 <MX_GPIO_Init+0x150>)
 80010d0:	f002 fcfe 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOCO_TX_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LOCO_TX_ENABLE_Pin|LD2_Pin;
 80010d4:	2322      	movs	r3, #34	; 0x22
 80010d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4824      	ldr	r0, [pc, #144]	; (800117c <MX_GPIO_Init+0x14c>)
 80010ec:	f002 fcf0 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLOSE_INTERLOCK_TRIGGER_Pin HORN_CONTROL_Pin BRAKE_CONTROL_Pin RELAY_ENABLE_Pin
                           RELAY_SELECT_Pin */
  GPIO_InitStruct.Pin = CLOSE_INTERLOCK_TRIGGER_Pin|HORN_CONTROL_Pin|BRAKE_CONTROL_Pin|RELAY_ENABLE_Pin
 80010f0:	f44f 63ce 	mov.w	r3, #1648	; 0x670
 80010f4:	613b      	str	r3, [r7, #16]
                          |RELAY_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <MX_GPIO_Init+0x150>)
 800110a:	f002 fce1 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISOLATED_INPUT_UPDATED_Pin nBODYWORK_CLOSED_Pin */
  GPIO_InitStruct.Pin = ISOLATED_INPUT_UPDATED_Pin|nBODYWORK_CLOSED_Pin;
 800110e:	2322      	movs	r3, #34	; 0x22
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_GPIO_Init+0x154>)
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <MX_GPIO_Init+0x158>)
 8001122:	f002 fcd5 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDEX_Pin */
  GPIO_InitStruct.Pin = INDEX_Pin;
 8001126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_GPIO_Init+0x154>)
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INDEX_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_GPIO_Init+0x14c>)
 800113c:	f002 fcc8 	bl	8003ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2007      	movs	r0, #7
 8001146:	f002 fc16 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800114a:	2007      	movs	r0, #7
 800114c:	f002 fc2f 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2017      	movs	r0, #23
 8001156:	f002 fc0e 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800115a:	2017      	movs	r0, #23
 800115c:	f002 fc27 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f002 fc06 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116a:	2028      	movs	r0, #40	; 0x28
 800116c:	f002 fc1f 	bl	80039ae <HAL_NVIC_EnableIRQ>

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800
 8001180:	40011000 	.word	0x40011000
 8001184:	10110000 	.word	0x10110000
 8001188:	40010c00 	.word	0x40010c00

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>

08001196 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f805 	bl	80011ae <_ZNSt8__detail17_List_node_header7_M_initEv>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
#endif
      }
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fbe3 	bl	80019a8 <_ZNSaISt10_List_nodeIP6PacketEED1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fbc6 	bl	8001988 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implC1Ev>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZNSt7__cxx114listIP6PacketSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffeb 	bl	80011ec <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EEC1Ev>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_Z11send_packetP20__UART_HandleTypeDefhhPhh>:
		return;
	}
}

void send_packet(UART_HandleTypeDef *huart, uint8_t address, uint8_t command, uint8_t *data, uint8_t length)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	72fb      	strb	r3, [r7, #11]
 800122e:	4613      	mov	r3, r2
 8001230:	72bb      	strb	r3, [r7, #10]
	// Wait for any ongoing transmission to finish
	//while (transmit_busy);
	transmit_busy = true;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xdc>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]

	// Generate packet
	transmit_buffer.start = 0xff;
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	701a      	strb	r2, [r3, #0]
	transmit_buffer.address = address;
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 8001248:	7853      	ldrb	r3, [r2, #1]
 800124a:	f361 1387 	bfi	r3, r1, #6, #2
 800124e:	7053      	strb	r3, [r2, #1]
	transmit_buffer.command = command;
 8001250:	7abb      	ldrb	r3, [r7, #10]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 800125a:	7853      	ldrb	r3, [r2, #1]
 800125c:	f361 1305 	bfi	r3, r1, #4, #2
 8001260:	7053      	strb	r3, [r2, #1]
	transmit_buffer.length = length;
 8001262:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b2d9      	uxtb	r1, r3
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 800126e:	7853      	ldrb	r3, [r2, #1]
 8001270:	f361 0303 	bfi	r3, r1, #0, #4
 8001274:	7053      	strb	r3, [r2, #1]
	transmit_buffer.checksum = transmit_buffer.info;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 8001278:	785a      	ldrb	r2, [r3, #1]
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 800127c:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < length; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	da17      	bge.n	80012bc <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0x9c>
		transmit_buffer.data[i] = data[i];
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	4413      	add	r3, r2
 800129a:	3302      	adds	r3, #2
 800129c:	460a      	mov	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
		transmit_buffer.checksum += data[i];
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 80012a2:	7c9a      	ldrb	r2, [r3, #18]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	440b      	add	r3, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 80012b2:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < length; i++) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e7e2      	b.n	8001282 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0x62>
	}

	// Move checksum to end of packet
	if (length < 16) transmit_buffer.data[length] = transmit_buffer.checksum;
 80012bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d807      	bhi.n	80012d4 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xb4>
 80012c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 80012ca:	7c91      	ldrb	r1, [r2, #18]
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 80012ce:	4413      	add	r3, r2
 80012d0:	460a      	mov	r2, r1
 80012d2:	709a      	strb	r2, [r3, #2]

	// Start transmission
	HAL_GPIO_WritePin(LOCO_TX_ENABLE_GPIO_Port, LOCO_TX_ENABLE_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2102      	movs	r1, #2
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe4>)
 80012da:	f002 fd94 	bl	8003e06 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(huart, (uint8_t*)&transmit_buffer, (uint16_t)length+3);
 80012de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3303      	adds	r3, #3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4905      	ldr	r1, [pc, #20]	; (8001300 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe0>)
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f004 fa24 	bl	800573a <HAL_UART_Transmit_IT>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000263 	.word	0x20000263
 8001300:	20000250 	.word	0x20000250
 8001304:	40010800 	.word	0x40010800

08001308 <_Z10get_packetv>:

// Get first packet in queue
Packet* get_packet() {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	return incoming_packets.front();
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <_Z10get_packetv+0x14>)
 800130e:	f000 fb67 	bl	80019e0 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5frontEv>
 8001312:	4603      	mov	r3, r0
 8001314:	681b      	ldr	r3, [r3, #0]
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000264 	.word	0x20000264

08001320 <_Z12clear_packetP6Packet>:

// Remove packet from incoming queue
void clear_packet(Packet* packet) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	incoming_packets.remove(packet);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <_Z12clear_packetP6Packet+0x28>)
 800132e:	f000 fb6a 	bl	8001a06 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_>
	delete packet;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <_Z12clear_packetP6Packet+0x20>
 8001338:	2113      	movs	r1, #19
 800133a:	4618      	mov	r0, r3
 800133c:	f004 fbc4 	bl	8005ac8 <_ZdlPvj>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000264 	.word	0x20000264

0800134c <_Z16packet_availablev>:

// Check if valid packet in queue and remove any invalid
bool packet_available()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
	while (incoming_packets.size() > 0) {
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <_Z16packet_availablev+0x80>)
 8001354:	f000 fbbf 	bl	8001ad6 <_ZNKSt7__cxx114listIP6PacketSaIS2_EE4sizeEv>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d02c      	beq.n	80013c2 <_Z16packet_availablev+0x76>
		Packet* packet = get_packet();
 8001368:	f7ff ffce 	bl	8001308 <_Z10get_packetv>
 800136c:	6078      	str	r0, [r7, #4]
		uint8_t calculated_checksum = packet->info;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < packet->length; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4293      	cmp	r3, r2
 8001388:	da0b      	bge.n	80013a2 <_Z16packet_availablev+0x56>
			calculated_checksum += packet->data[i];
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	3302      	adds	r3, #2
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	4413      	add	r3, r2
 8001398:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < packet->length; i++) {
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	e7ea      	b.n	8001378 <_Z16packet_availablev+0x2c>
		}
		if (packet->checksum == calculated_checksum) return true;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7c9b      	ldrb	r3, [r3, #18]
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d101      	bne.n	80013b0 <_Z16packet_availablev+0x64>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e009      	b.n	80013c4 <_Z16packet_availablev+0x78>
		clear_packet(packet);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffb5 	bl	8001320 <_Z12clear_packetP6Packet>
		invalid_packet_count += 1;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <_Z16packet_availablev+0x84>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <_Z16packet_availablev+0x84>)
 80013be:	6013      	str	r3, [r2, #0]
	while (incoming_packets.size() > 0) {
 80013c0:	e7c7      	b.n	8001352 <_Z16packet_availablev+0x6>
	}

	return false;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000264 	.word	0x20000264
 80013d0:	20000270 	.word	0x20000270

080013d4 <_Z15start_receivingP20__UART_HandleTypeDef>:

void start_receiving(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	receive_state = 0;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_Z15start_receivingP20__UART_HandleTypeDef+0x28>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(huart);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f004 fa1e 	bl	8005824 <HAL_UART_AbortReceive_IT>
	HAL_UART_Receive_IT(huart, &receive_buffer.start, (uint16_t) 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	4905      	ldr	r1, [pc, #20]	; (8001400 <_Z15start_receivingP20__UART_HandleTypeDef+0x2c>)
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f004 f9e8 	bl	80057c2 <HAL_UART_Receive_IT>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000288 	.word	0x20000288
 8001400:	20000274 	.word	0x20000274

08001404 <_ZN10LocoModuleC1EiP12ErrorHandler>:
	// Module variable info
	enum { STATE, SPEED_SETPOINT, ACTUAL_SPEED, HORN, VAR_MAX };
	uint8_t* data_pointers [VAR_MAX] = {(uint8_t*)&state, (uint8_t*)&speed_setpoint, (uint8_t*)&actual_speed, (uint8_t*)&horn};
	uint8_t data_sizes [VAR_MAX] = {sizeof(state), sizeof(speed_setpoint), sizeof(actual_speed), sizeof(horn)};

	LocoModule(int _id, ErrorHandler* _error_handler) {
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	731a      	strb	r2, [r3, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f103 020c 	add.w	r2, r3, #12
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	61da      	str	r2, [r3, #28]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f103 0210 	add.w	r2, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	621a      	str	r2, [r3, #32]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f103 0214 	add.w	r2, r3, #20
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f103 0218 	add.w	r2, r3, #24
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <_ZN10LocoModuleC1EiP12ErrorHandler+0x60>)
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
		id = _id;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]
		error_handler = _error_handler;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
	}
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	08005cc0 	.word	0x08005cc0

08001468 <_ZN10LocoModule9send_dataEh>:

	void send_data(uint8_t variable_index) {
 8001468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800146c:	b08b      	sub	sp, #44	; 0x2c
 800146e:	af02      	add	r7, sp, #8
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	70fb      	strb	r3, [r7, #3]
		uint8_t new_data[length + 1];
		new_data[0] = variable_index;
		for (int i = 0; i < length; i++) {
			new_data[i + 1] = data[i];
		}
		send_packet(huart, id, OK, new_data, (uint16_t) length + 1);
 8001476:	466b      	mov	r3, sp
 8001478:	461e      	mov	r6, r3
		uint8_t length = data_sizes[variable_index];
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001484:	76fb      	strb	r3, [r7, #27]
		uint8_t* data = data_pointers[variable_index];
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	3306      	adds	r3, #6
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	617b      	str	r3, [r7, #20]
		uint8_t new_data[length + 1];
 8001494:	7ef9      	ldrb	r1, [r7, #27]
 8001496:	6139      	str	r1, [r7, #16]
 8001498:	460b      	mov	r3, r1
 800149a:	3301      	adds	r3, #1
 800149c:	2200      	movs	r2, #0
 800149e:	4698      	mov	r8, r3
 80014a0:	4691      	mov	r9, r2
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b6:	460b      	mov	r3, r1
 80014b8:	3301      	adds	r3, #1
 80014ba:	2200      	movs	r2, #0
 80014bc:	461c      	mov	r4, r3
 80014be:	4615      	mov	r5, r2
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	00eb      	lsls	r3, r5, #3
 80014ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014ce:	00e2      	lsls	r2, r4, #3
 80014d0:	460b      	mov	r3, r1
 80014d2:	3301      	adds	r3, #1
 80014d4:	3307      	adds	r3, #7
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	ebad 0d03 	sub.w	sp, sp, r3
 80014de:	ab02      	add	r3, sp, #8
 80014e0:	3300      	adds	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
		new_data[0] = variable_index;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	da0b      	bge.n	800150e <_ZN10LocoModule9send_dataEh+0xa6>
			new_data[i + 1] = data[i];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	441a      	add	r2, r3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	7811      	ldrb	r1, [r2, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++) {
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	e7ef      	b.n	80014ee <_ZN10LocoModule9send_dataEh+0x86>
		send_packet(huart, id, OK, new_data, (uint16_t) length + 1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6858      	ldr	r0, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2d9      	uxtb	r1, r3
 8001518:	7efb      	ldrb	r3, [r7, #27]
 800151a:	3301      	adds	r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f7ff fe7c 	bl	8001220 <_Z11send_packetP20__UART_HandleTypeDefhhPhh>
 8001528:	46b5      	mov	sp, r6
	}
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001534 <_ZN10LocoModule12request_dataEh>:

	void request_data(uint8_t variable_index) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
		uint8_t data[1] = { variable_index };
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	733b      	strb	r3, [r7, #12]
		send_packet(huart, id, OK, data, (uint16_t) 1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6858      	ldr	r0, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2201      	movs	r2, #1
 8001554:	9200      	str	r2, [sp, #0]
 8001556:	2200      	movs	r2, #0
 8001558:	f7ff fe62 	bl	8001220 <_Z11send_packetP20__UART_HandleTypeDefhhPhh>
	}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN10LocoModule12parse_packetEP6Packet>:
	void request_error() {
		uint8_t data[0];
		send_packet(huart, id, ERROR, data, (uint16_t) 0);
	}

	void parse_packet(Packet *packet) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
		if (packet->command == OK) {
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d12f      	bne.n	80015dc <_ZN10LocoModule12parse_packetEP6Packet+0x78>
			uint8_t variable_index = packet->data[0];
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	72fb      	strb	r3, [r7, #11]
			if (variable_index > sizeof(data_pointers)/sizeof(data_pointers[0])) return;
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d837      	bhi.n	80015f8 <_ZN10LocoModule12parse_packetEP6Packet+0x94>
			if (packet->length > 1) {
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d91c      	bls.n	80015d0 <_ZN10LocoModule12parse_packetEP6Packet+0x6c>
				for (int i = 0; i < data_sizes[variable_index]; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	da26      	bge.n	80015fa <_ZN10LocoModule12parse_packetEP6Packet+0x96>
					data_pointers[variable_index][i] = packet->data[i+1];
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	440b      	add	r3, r1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	440a      	add	r2, r1
 80015c4:	7892      	ldrb	r2, [r2, #2]
 80015c6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < data_sizes[variable_index]; i++) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e7e4      	b.n	800159a <_ZN10LocoModule12parse_packetEP6Packet+0x36>
				}
			} else {
				send_data(variable_index);
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff47 	bl	8001468 <_ZN10LocoModule9send_dataEh>
 80015da:	e00e      	b.n	80015fa <_ZN10LocoModule12parse_packetEP6Packet+0x96>
			}
		} else if (packet->command == WARNING) {
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d007      	beq.n	80015fa <_ZN10LocoModule12parse_packetEP6Packet+0x96>
//					uint8_t warning_code = error_handler->warnings.front();
//					send_warning(warning_code);
//					error_handler->clear_warning(warning_code);
//				}
//			}
		} else if (packet->command == ERROR) {
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	e000      	b.n	80015fa <_ZN10LocoModule12parse_packetEP6Packet+0x96>
			if (variable_index > sizeof(data_pointers)/sizeof(data_pointers[0])) return;
 80015f8:	bf00      	nop
//					error_handler->clear_error(error_code);
//				}
//			}
		} else if (packet->command == ACTION_REQUIRED) {
		}
	}
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZN6TPM4009send_dataEv>:
	CAN_TxHeaderTypeDef tx_header;
	uint8_t tx_data[8];
	uint32_t tx_mailbox;

	// Send data over CAN bus
	void send_data() {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
		tx_header.ExtId = 0x60;			// Message id
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2260      	movs	r2, #96	; 0x60
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
		tx_header.IDE = CAN_ID_EXT;		// Extended 29 bit id
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
		tx_header.RTR = CAN_RTR_DATA;	// Data frame
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
		tx_header.DLC = 8;				// 8 bytes
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2208      	movs	r2, #8
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
		tx_header.TransmitGlobalTime = DISABLE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (HAL_CAN_AddTxMessage(hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	334c      	adds	r3, #76	; 0x4c
 800163c:	f001 fc81 	bl	8002f42 <HAL_CAN_AddTxMessage>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <_ZN6TPM4009send_dataEv+0x54>
			Error_Handler();
 8001650:	f7ff fd9c 	bl	800118c <Error_Handler>
		}

		// Wait for ongoing transmissions to complete
		while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3) {}
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fd4c 	bl	80030f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b03      	cmp	r3, #3
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d000      	beq.n	8001670 <_ZN6TPM4009send_dataEv+0x70>
 800166e:	e7f1      	b.n	8001654 <_ZN6TPM4009send_dataEv+0x54>
	}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_ZN6TPM4009read_dataEv>:

	// Read data received over CAN bus
	void read_data() {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f103 0208 	add.w	r2, r3, #8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3324      	adds	r3, #36	; 0x24
 800168e:	2100      	movs	r1, #0
 8001690:	f001 fd65 	bl	800315e <HAL_CAN_GetRxMessage>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_ZN6TPM4009read_dataEv+0x30>
			Error_Handler();
 80016a4:	f7ff fd72 	bl	800118c <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState)1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2120      	movs	r1, #32
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <_ZN6TPM4009read_dataEv+0x44>)
 80016ae:	f002 fbaa 	bl	8003e06 <HAL_GPIO_WritePin>
	}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40010800 	.word	0x40010800

080016c0 <_ZN6TPM40011set_headingEs>:

		send_data();
	}

	// Set motor controller heading over CAN, -4000 to 4000
	void set_heading(int16_t heading) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
		// -4000 = 0xf060
		// +4000 = 0x0fa0

		uint8_t reg_low = HEADING & 0xff;
 80016cc:	23ea      	movs	r3, #234	; 0xea
 80016ce:	73fb      	strb	r3, [r7, #15]
		uint8_t reg_high = (HEADING >> 8) & 0xff;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73bb      	strb	r3, [r7, #14]
		uint8_t rw_byte = node_id + 64;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	3340      	adds	r3, #64	; 0x40
 80016da:	737b      	strb	r3, [r7, #13]
		uint8_t heading_low = heading & 0xff;
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	733b      	strb	r3, [r7, #12]
		uint8_t heading_high = (heading >> 8) & 0xff;
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	72fb      	strb	r3, [r7, #11]

		tx_data[0] = node_id;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	791a      	ldrb	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		tx_data[1] = reg_low;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		tx_data[2] = reg_high;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7bba      	ldrb	r2, [r7, #14]
 80016fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		tx_data[3] = rw_byte;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7b7a      	ldrb	r2, [r7, #13]
 8001706:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		tx_data[4] = heading_low;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7b3a      	ldrb	r2, [r7, #12]
 800170e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		tx_data[5] = heading_high;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7afa      	ldrb	r2, [r7, #11]
 8001716:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		tx_data[6] = 0x00;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		tx_data[7] = 0x00;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

		send_data();
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff68 	bl	8001600 <_ZN6TPM4009send_dataEv>
	}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implD1Ev>:
      struct _List_impl
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f9e4 	bl	8001b0e <_ZNSaISt10_List_nodeIhEED1Ev>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZNSt7__cxx1110_List_baseIhSaIhEEC1Ev>:
      _List_base() = default;
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9c7 	bl	8001aee <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implC1Ev>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt7__cxx114listIhSaIhEEC1Ev>:
      list() = default;
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffeb 	bl	8001750 <_ZNSt7__cxx1110_List_baseIhSaIhEEC1Ev>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZNSt7__cxx114listIhSaIhEED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f9c9 	bl	8001b26 <_ZNSt7__cxx1110_List_baseIhSaIhEED1Ev>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <_ZN12ErrorHandlerC1Ev>:
#include <list>
#include <algorithm>

// IDENTICAL BETWEEN CONTROLBOX AND MAINBOARD

class ErrorHandler {
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <_ZN12ErrorHandlerC1Ev+0x44>)
 80017ac:	461c      	mov	r4, r3
 80017ae:	4615      	mov	r5, r2
 80017b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <_ZN12ErrorHandlerC1Ev+0x48>)
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	332c      	adds	r3, #44	; 0x2c
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ffcd 	bl	800176a <_ZNSt7__cxx114listIhSaIhEEC1Ev>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3338      	adds	r3, #56	; 0x38
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffc8 	bl	800176a <_ZNSt7__cxx114listIhSaIhEEC1Ev>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	08005cd4 	.word	0x08005cd4
 80017e8:	08005cc4 	.word	0x08005cc4

080017ec <_ZN6TPM400C1Ev>:
class TPM400 {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	711a      	strb	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
	...

08001808 <HAL_CAN_RxFifo0MsgPendingCallback>:
TPM400 motor_controller;
LocoModule module(1, &error_handler);

extern float rpm;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	motor_controller.read_data();
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001812:	f7ff ff31 	bl	8001678 <_ZN6TPM4009read_dataEv>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002d4 	.word	0x200002d4

08001824 <init_modules>:

void init_motor_controller(CAN_HandleTypeDef* _hcan) {
	motor_controller.hcan = _hcan;
}

void init_modules(UART_HandleTypeDef *_huart) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	module.huart = _huart;
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <init_modules+0x20>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6053      	str	r3, [r2, #4]
	start_receiving(module.huart);
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <init_modules+0x20>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fdcc 	bl	80013d4 <_Z15start_receivingP20__UART_HandleTypeDef>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000324 	.word	0x20000324

08001848 <_Z14handle_packetsv>:

void handle_packets() {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	while (packet_available()) {
 800184e:	f7ff fd7d 	bl	800134c <_Z16packet_availablev>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d014      	beq.n	8001882 <_Z14handle_packetsv+0x3a>
		Packet *packet = get_packet();
 8001858:	f7ff fd56 	bl	8001308 <_Z10get_packetv>
 800185c:	6078      	str	r0, [r7, #4]

		if (packet->address == module.id) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <_Z14handle_packetsv+0x44>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d103      	bne.n	800187a <_Z14handle_packetsv+0x32>
			module.parse_packet(packet);
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <_Z14handle_packetsv+0x44>)
 8001876:	f7ff fe75 	bl	8001564 <_ZN10LocoModule12parse_packetEP6Packet>
		}

		clear_packet(packet);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fd50 	bl	8001320 <_Z12clear_packetP6Packet>
	while (packet_available()) {
 8001880:	e7e5      	b.n	800184e <_Z14handle_packetsv+0x6>
	}
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000324 	.word	0x20000324

08001890 <mainboard>:

void mainboard() {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(VARIANT_INDICATOR_GPIO_Port, VARIANT_INDICATOR_Pin)) module.id = 1;
 8001894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001898:	4835      	ldr	r0, [pc, #212]	; (8001970 <mainboard+0xe0>)
 800189a:	f002 fa9d 	bl	8003dd8 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <mainboard+0x26>
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <mainboard+0xe4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e002      	b.n	80018bc <mainboard+0x2c>
	else module.id = 2;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <mainboard+0xe4>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(RELAY_ENABLE_GPIO_Port,RELAY_SELECT_Pin,GPIO_PIN_SET); // Set the value of the enable and select relays to give power to TPM400
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c2:	482b      	ldr	r0, [pc, #172]	; (8001970 <mainboard+0xe0>)
 80018c4:	f002 fa9f 	bl	8003e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_ENABLE_GPIO_Port,RELAY_ENABLE_Pin,GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4828      	ldr	r0, [pc, #160]	; (8001970 <mainboard+0xe0>)
 80018d0:	f002 fa99 	bl	8003e06 <HAL_GPIO_WritePin>
	//motor_controller.enable_can_control();
	//motor_controller.set_heading(module.speed_setpoint);


	while (true) {
		handle_packets();
 80018d4:	f7ff ffb8 	bl	8001848 <_Z14handle_packetsv>
		module.send_data(3);
 80018d8:	2103      	movs	r1, #3
 80018da:	4826      	ldr	r0, [pc, #152]	; (8001974 <mainboard+0xe4>)
 80018dc:	f7ff fdc4 	bl	8001468 <_ZN10LocoModule9send_dataEh>
		module.request_data(2);
 80018e0:	2102      	movs	r1, #2
 80018e2:	4824      	ldr	r0, [pc, #144]	; (8001974 <mainboard+0xe4>)
 80018e4:	f7ff fe26 	bl	8001534 <_ZN10LocoModule12request_dataEh>

		//if (!HAL_GPIO_ReadPin(nBODYWORK_CLOSED_GPIO_Port, nBODYWORK_CLOSED_Pin)) error_handler.warning(error_handler.BODYWORK_WARNING);
		//HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, (GPIO_PinState)module.horn);
		//HAL_GPIO_WritePin(HORN_CONTROL_GPIO_Port, HORN_CONTROL_Pin, (GPIO_PinState)module.horn);

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState)((HAL_GetTick()%800)<400));
 80018e8:	f000 ff28 	bl	800273c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <mainboard+0xe8>)
 80018f0:	fba3 1302 	umull	r1, r3, r3, r2
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f240 128f 	movw	r2, #399	; 0x18f
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	2120      	movs	r1, #32
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <mainboard+0xec>)
 8001914:	f002 fa77 	bl	8003e06 <HAL_GPIO_WritePin>

		//module.actual_speed = module.speed_setpoint;

		module.actual_speed = rpm;
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <mainboard+0xf0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a15      	ldr	r2, [pc, #84]	; (8001974 <mainboard+0xe4>)
 800191e:	6153      	str	r3, [r2, #20]
		if (module.speed_setpoint > 0.2){
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <mainboard+0xe4>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd77 	bl	8000418 <__aeabi_f2d>
 800192a:	a30f      	add	r3, pc, #60	; (adr r3, 8001968 <mainboard+0xd8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe48 	bl	80005c4 <__aeabi_dcmpgt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <mainboard+0xcc>
			HAL_GPIO_WritePin(BRAKE_CONTROL_GPIO_Port,BRAKE_CONTROL_Pin,GPIO_PIN_SET); // turns the brakes off
 800193a:	2201      	movs	r2, #1
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <mainboard+0xe0>)
 8001940:	f002 fa61 	bl	8003e06 <HAL_GPIO_WritePin>
			motor_controller.set_heading(module.speed_setpoint);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <mainboard+0xe4>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f8a3 	bl	8000a94 <__aeabi_f2iz>
 800194e:	4603      	mov	r3, r0
 8001950:	b21b      	sxth	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <mainboard+0xf4>)
 8001956:	f7ff feb3 	bl	80016c0 <_ZN6TPM40011set_headingEs>
 800195a:	e7bb      	b.n	80018d4 <mainboard+0x44>
		}
		else{
			HAL_GPIO_WritePin(BRAKE_CONTROL_GPIO_Port,BRAKE_CONTROL_Pin,GPIO_PIN_RESET); // turn the brakes on
 800195c:	2200      	movs	r2, #0
 800195e:	2140      	movs	r1, #64	; 0x40
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <mainboard+0xe0>)
 8001962:	f002 fa50 	bl	8003e06 <HAL_GPIO_WritePin>
		handle_packets();
 8001966:	e7b5      	b.n	80018d4 <mainboard+0x44>
 8001968:	9999999a 	.word	0x9999999a
 800196c:	3fc99999 	.word	0x3fc99999
 8001970:	40011000 	.word	0x40011000
 8001974:	20000324 	.word	0x20000324
 8001978:	51eb851f 	.word	0x51eb851f
 800197c:	40010800 	.word	0x40010800
 8001980:	2000024c 	.word	0x2000024c
 8001984:	200002d4 	.word	0x200002d4

08001988 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8d8 	bl	8001b46 <_ZNSaISt10_List_nodeIP6PacketEEC1Ev>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fbfc 	bl	8001196 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZNSaISt10_List_nodeIP6PacketEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8d4 	bl	8001b5e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEED1Ev>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f8d2 	bl	8001b72 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fbff 	bl	80011d4 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implD1Ev>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8f7 	bl	8001bdc <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f901 	bl	8001bfe <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_>:
# define _GLIBCXX20_ONLY(__expr)
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::__remove_return_type
    list<_Tp, _Alloc>::
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b089      	sub	sp, #36	; 0x24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
    remove(const value_type& __value)
    {
      size_type __removed __attribute__((__unused__)) = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
      iterator __first = begin();
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8e1 	bl	8001bdc <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	61bb      	str	r3, [r7, #24]
      iterator __last = end();
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8cc 	bl	8001bbc <_ZNSt7__cxx114listIP6PacketSaIS2_EE3endEv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]
      iterator __extra = __last;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
      while (__first != __last)
 8001a2c:	f107 0214 	add.w	r2, r7, #20
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f8ef 	bl	8001c1a <_ZStneRKSt14_List_iteratorIP6PacketES4_>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d035      	beq.n	8001aae <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa8>
	{
	  iterator __next = __first;
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60fb      	str	r3, [r7, #12]
	  ++__next;
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f8f8 	bl	8001c40 <_ZNSt14_List_iteratorIP6PacketEppEv>
	  if (*__first == __value)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f8d2 	bl	8001bfe <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	bf0c      	ite	eq
 8001a66:	2301      	moveq	r3, #1
 8001a68:	2300      	movne	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa2>
	    {
	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
	      // 526. Is it undefined if a function in the standard changes
	      // in parameters?
	      if (std::__addressof(*__first) != std::__addressof(__value))
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f8c2 	bl	8001bfe <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f8ee 	bl	8001c5e <_ZSt11__addressofIP6PacketEPT_RS2_>
 8001a82:	4604      	mov	r4, r0
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f000 f8f4 	bl	8001c72 <_ZSt11__addressofIKP6PacketEPT_RS3_>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	429c      	cmp	r4, r3
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0x9e>
		{
		  _M_erase(__first);
 8001a9a:	69b9      	ldr	r1, [r7, #24]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8f2 	bl	8001c86 <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 8001aa2:	e001      	b.n	8001aa8 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa2>
		  _GLIBCXX20_ONLY( __removed++ );
		}
	      else
		__extra = __first;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	613b      	str	r3, [r7, #16]
	    }
	  __first = __next;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	61bb      	str	r3, [r7, #24]
      while (__first != __last)
 8001aac:	e7be      	b.n	8001a2c <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0x26>
	}
      if (__extra != __last)
 8001aae:	f107 0214 	add.w	r2, r7, #20
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f8ae 	bl	8001c1a <_ZStneRKSt14_List_iteratorIP6PacketES4_>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xc8>
	{
	  _M_erase(__extra);
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8dd 	bl	8001c86 <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
	  _GLIBCXX20_ONLY( __removed++ );
	}
      return _GLIBCXX20_ONLY( __removed );
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
    }
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}

08001ad6 <_ZNKSt7__cxx114listIP6PacketSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8f7 	bl	8001cd2 <_ZNKSt7__cxx114listIP6PacketSaIS2_EE13_M_node_countEv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8f8 	bl	8001cec <_ZNSaISt10_List_nodeIhEEC1Ev>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb49 	bl	8001196 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_ZNSaISt10_List_nodeIhEED1Ev>:
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8f4 	bl	8001d04 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEED1Ev>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZNSt7__cxx1110_List_baseIhSaIhEED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8f2 	bl	8001d18 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fdfe 	bl	8001738 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implD1Ev>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZNSaISt10_List_nodeIP6PacketEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f907 	bl	8001d62 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEEC1Ev>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d015      	beq.n	8001bb4 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001b92:	6938      	ldr	r0, [r7, #16]
 8001b94:	f000 f8ef 	bl	8001d76 <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 8001b98:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8f9 	bl	8001d92 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f8fe 	bl	8001da6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8001baa:	6939      	ldr	r1, [r7, #16]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f907 	bl	8001dc0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8001bb2:	e7e5      	b.n	8001b80 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv+0xe>
    }
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZNSt7__cxx114listIP6PacketSaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f906 	bl	8001dde <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f8f5 	bl	8001dde <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_ZNKSt14_List_iteratorIP6PacketEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f8b3 	bl	8001d76 <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_ZStneRKSt14_List_iteratorIP6PacketES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <_ZNSt14_List_iteratorIP6PacketEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
	return *this;
 8001c52:	687b      	ldr	r3, [r7, #4]
      }
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <_ZSt11__addressofIP6PacketEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <_ZSt11__addressofIKP6PacketEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8001c86:	b590      	push	{r4, r7, lr}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f8b0 	bl	8001dfa <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 ff15 	bl	8005acc <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f872 	bl	8001d92 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>
 8001cae:	4604      	mov	r4, r0
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f860 	bl	8001d76 <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f000 f873 	bl	8001da6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f87b 	bl	8001dc0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}

08001cd2 <_ZNKSt7__cxx114listIP6PacketSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f89c 	bl	8001e1a <_ZNKSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_get_sizeEv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZNSaISt10_List_nodeIhEEC1Ev>:
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8cf 	bl	8001e98 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEEC1Ev>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEED1Ev>:
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d015      	beq.n	8001d5a <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001d38:	6938      	ldr	r0, [r7, #16]
 8001d3a:	f000 f879 	bl	8001e30 <_ZNSt10_List_nodeIhE9_M_valptrEv>
 8001d3e:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f883 	bl	8001e4c <_ZNSt7__cxx1110_List_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f888 	bl	8001e60 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__tmp);
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f891 	bl	8001e7a <_ZNSt7__cxx1110_List_baseIhSaIhEE11_M_put_nodeEPSt10_List_nodeIhE>
      while (__cur != &_M_impl._M_node)
 8001d58:	e7e5      	b.n	8001d26 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv+0xe>
    }
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3308      	adds	r3, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f892 	bl	8001eac <_ZN9__gnu_cxx16__aligned_membufIP6PacketE6_M_ptrEv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f886 	bl	8001ec4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f881 	bl	8001ed8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE10deallocateERS4_PS3_j>
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <_ZNKSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <_ZNSt10_List_nodeIhE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f85a 	bl	8001ef6 <_ZN9__gnu_cxx16__aligned_membufIhE6_M_ptrEv>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZNSt7__cxx1110_List_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f84e 	bl	8001f0e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE7destroyIhEEvPT_>
	}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_ZNSt7__cxx1110_List_baseIhSaIhEE11_M_put_nodeEPSt10_List_nodeIhE>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f849 	bl	8001f22 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE10deallocateERS2_PS1_j>
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEEC1Ev>:
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <_ZN9__gnu_cxx16__aligned_membufIP6PacketE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f843 	bl	8001f40 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE7_M_addrEv>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f833 	bl	8001f54 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE10deallocateEPS4_j>
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZN9__gnu_cxx16__aligned_membufIhE6_M_ptrEv>:
      _M_ptr() noexcept
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f83b 	bl	8001f7a <_ZN9__gnu_cxx16__aligned_membufIhE7_M_addrEv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE7destroyIhEEvPT_>:
	destroy(_Up* __p)
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f82b 	bl	8001f8e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE10deallocateEPS2_j>
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE7_M_addrEv>:
      _M_addr() noexcept
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68b8      	ldr	r0, [r7, #8]
 8001f6e:	f003 fdab 	bl	8005ac8 <_ZdlPvj>
      }
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_ZN9__gnu_cxx16__aligned_membufIhE7_M_addrEv>:
      _M_addr() noexcept
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f003 fd8e 	bl	8005ac8 <_ZdlPvj>
      }
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_ZN12ErrorHandlerD1Ev>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3338      	adds	r3, #56	; 0x38
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fbdf 	bl	8001784 <_ZNSt7__cxx114listIhSaIhEED1Ev>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	332c      	adds	r3, #44	; 0x2c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fbda 	bl	8001784 <_ZNSt7__cxx114listIhSaIhEED1Ev>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZNSt7__cxx114listIP6PacketSaIS2_EED1Ev>:
      ~list() = default;
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fceb 	bl	80019c0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EED1Ev>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d117      	bne.n	8002034 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800200a:	4293      	cmp	r3, r2
 800200c:	d112      	bne.n	8002034 <_Z41__static_initialization_and_destruction_0ii+0x40>
std::list<Packet*> incoming_packets;
 800200e:	4812      	ldr	r0, [pc, #72]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002010:	f7ff f8f9 	bl	8001206 <_ZNSt7__cxx114listIP6PacketSaIS2_EEC1Ev>
unsigned long last_packet_tick = HAL_GetTick();
 8002014:	f000 fb92 	bl	800273c <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800201c:	6013      	str	r3, [r2, #0]
ErrorHandler error_handler;
 800201e:	4810      	ldr	r0, [pc, #64]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002020:	f7ff fbbe 	bl	80017a0 <_ZN12ErrorHandlerC1Ev>
TPM400 motor_controller;
 8002024:	480f      	ldr	r0, [pc, #60]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002026:	f7ff fbe1 	bl	80017ec <_ZN6TPM400C1Ev>
LocoModule module(1, &error_handler);
 800202a:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800202c:	2101      	movs	r1, #1
 800202e:	480e      	ldr	r0, [pc, #56]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002030:	f7ff f9e8 	bl	8001404 <_ZN10LocoModuleC1EiP12ErrorHandler>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002040:	4293      	cmp	r3, r2
 8002042:	d105      	bne.n	8002050 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ErrorHandler error_handler;
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002046:	f7ff ffb5 	bl	8001fb4 <_ZN12ErrorHandlerD1Ev>
std::list<Packet*> incoming_packets;
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800204c:	f7ff ffc5 	bl	8001fda <_ZNSt7__cxx114listIP6PacketSaIS2_EED1Ev>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000264 	.word	0x20000264
 800205c:	2000028c 	.word	0x2000028c
 8002060:	20000290 	.word	0x20000290
 8002064:	200002d4 	.word	0x200002d4
 8002068:	20000324 	.word	0x20000324

0800206c <_GLOBAL__sub_I_packets_sent>:
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
 8002070:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ffbd 	bl	8001ff4 <_Z41__static_initialization_and_destruction_0ii>
 800207a:	bd80      	pop	{r7, pc}

0800207c <_GLOBAL__sub_D_packets_sent>:
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
 8002080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff ffb5 	bl	8001ff4 <_Z41__static_initialization_and_destruction_0ii>
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_MspInit+0x5c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_MspInit+0x5c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6193      	str	r3, [r2, #24]
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_MspInit+0x5c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_MspInit+0x5c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_MspInit+0x5c>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_MspInit+0x5c>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_MspInit+0x60>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_MspInit+0x60>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000

080020f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a28      	ldr	r2, [pc, #160]	; (80021ac <HAL_ADC_MspInit+0xbc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d122      	bne.n	8002156 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|MONITORING_24V_Pin;
 8002140:	2311      	movs	r3, #17
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002144:	2303      	movs	r3, #3
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	4619      	mov	r1, r3
 800214e:	4819      	ldr	r0, [pc, #100]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 8002150:	f001 fcbe 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002154:	e026      	b.n	80021a4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_ADC_MspInit+0xc8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d121      	bne.n	80021a4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MONITORING_24V_Pin;
 8002190:	2310      	movs	r3, #16
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002194:	2303      	movs	r3, #3
 8002196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MONITORING_24V_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	4619      	mov	r1, r3
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 80021a0:	f001 fc96 	bl	8003ad0 <HAL_GPIO_Init>
}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40012400 	.word	0x40012400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40012800 	.word	0x40012800

080021bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2d      	ldr	r2, [pc, #180]	; (800228c <HAL_CAN_MspInit+0xd0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d153      	bne.n	8002284 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 80021e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e6:	61d3      	str	r3, [r2, #28]
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_CAN_MspInit+0xd4>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800220c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	481c      	ldr	r0, [pc, #112]	; (8002294 <HAL_CAN_MspInit+0xd8>)
 8002222:	f001 fc55 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4816      	ldr	r0, [pc, #88]	; (8002294 <HAL_CAN_MspInit+0xd8>)
 800223c:	f001 fc48 	bl	8003ad0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_CAN_MspInit+0xdc>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_CAN_MspInit+0xdc>)
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2014      	movs	r0, #20
 800226a:	f001 fb84 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800226e:	2014      	movs	r0, #20
 8002270:	f001 fb9d 	bl	80039ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2015      	movs	r0, #21
 800227a:	f001 fb7c 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800227e:	2015      	movs	r0, #21
 8002280:	f001 fb95 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40006400 	.word	0x40006400
 8002290:	40021000 	.word	0x40021000
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40010000 	.word	0x40010000

0800229c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_I2C_MspInit+0x74>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d124      	bne.n	8002306 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	2312      	movs	r3, #18
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4619      	mov	r1, r3
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <HAL_I2C_MspInit+0x7c>)
 80022ea:	f001 fbf1 	bl	8003ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_I2C_MspInit+0x78>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005800 	.word	0x40005800
 8002314:	40021000 	.word	0x40021000
 8002318:	40010c00 	.word	0x40010c00

0800231c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d12c      	bne.n	8002396 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CH_A_Pin|CH_B_Pin;
 800236c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4619      	mov	r1, r3
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002382:	f001 fba5 	bl	8003ad0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201b      	movs	r0, #27
 800238c:	f001 faf3 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002390:	201b      	movs	r0, #27
 8002392:	f001 fb0c 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010800 	.word	0x40010800

080023ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_TIM_PWM_MspInit+0x34>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10b      	bne.n	80023d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_TIM_PWM_MspInit+0x38>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <HAL_TIM_PWM_MspInit+0x38>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_TIM_PWM_MspInit+0x38>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <HAL_TIM_MspPostInit+0x88>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d12f      	bne.n	8002468 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a13      	ldr	r2, [pc, #76]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_TIM_MspPostInit+0x8c>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002438:	23c0      	movs	r3, #192	; 0xc0
 800243a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2302      	movs	r3, #2
 8002442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4619      	mov	r1, r3
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <HAL_TIM_MspPostInit+0x90>)
 800244c:	f001 fb40 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WS2812_Pin;
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2302      	movs	r3, #2
 800245a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	4806      	ldr	r0, [pc, #24]	; (800247c <HAL_TIM_MspPostInit+0x94>)
 8002464:	f001 fb34 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40000400 	.word	0x40000400
 8002474:	40021000 	.word	0x40021000
 8002478:	40010800 	.word	0x40010800
 800247c:	40010c00 	.word	0x40010c00

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_UART_MspInit+0x70>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d123      	bne.n	80024e8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_UART_MspInit+0x74>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOCO_TX_Pin|LOCO_RX_Pin;
 80024d0:	230c      	movs	r3, #12
 80024d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2302      	movs	r3, #2
 80024da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <HAL_UART_MspInit+0x78>)
 80024e4:	f001 faf4 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010800 	.word	0x40010800

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <NMI_Handler+0x4>

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  indx++;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <SysTick_Handler+0x70>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <SysTick_Handler+0x70>)
 800254c:	6013      	str	r3, [r2, #0]

  if (indx == 200)
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <SysTick_Handler+0x70>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2bc8      	cmp	r3, #200	; 0xc8
 8002554:	d128      	bne.n	80025a8 <SysTick_Handler+0x68>
  {
	  speed = ((position - oldpos)*5); // encoder speed in clicks per/sec
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <SysTick_Handler+0x74>)
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	461a      	mov	r2, r3
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <SysTick_Handler+0x78>)
 8002560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002564:	1ad2      	subs	r2, r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe f8ed 	bl	800074c <__aeabi_i2f>
 8002572:	4603      	mov	r3, r0
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <SysTick_Handler+0x7c>)
 8002576:	6013      	str	r3, [r2, #0]
	  oldpos = position;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <SysTick_Handler+0x74>)
 800257a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <SysTick_Handler+0x78>)
 8002580:	801a      	strh	r2, [r3, #0]
	  indx = 0;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <SysTick_Handler+0x70>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
	  rpm = (speed / 512) * 60; // Divide by clicks per rotation and then multiply to get minutes
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <SysTick_Handler+0x7c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f9e3 	bl	800095c <__aeabi_fdiv>
 8002596:	4603      	mov	r3, r0
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <SysTick_Handler+0x80>)
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe f92a 	bl	80007f4 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <SysTick_Handler+0x84>)
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f8b6 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000358 	.word	0x20000358
 80025b4:	20000246 	.word	0x20000246
 80025b8:	20000354 	.word	0x20000354
 80025bc:	20000248 	.word	0x20000248
 80025c0:	42700000 	.word	0x42700000
 80025c4:	2000024c 	.word	0x2000024c

080025c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP2_PRESENT_Pin);
 80025cc:	2002      	movs	r0, #2
 80025ce:	f001 fc33 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80025de:	f000 fecf 	bl	8003380 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200000ec 	.word	0x200000ec

080025ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <CAN1_RX1_IRQHandler+0x10>)
 80025f2:	f000 fec5 	bl	8003380 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200000ec 	.word	0x200000ec

08002600 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD2_Pin);
 8002604:	2020      	movs	r0, #32
 8002606:	f001 fc17 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <TIM1_CC_IRQHandler+0x10>)
 8002616:	f002 fbda 	bl	8004dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000168 	.word	0x20000168

08002624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INDEX_Pin);
 8002628:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800262c:	f001 fc04 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}

08002634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff ffe5 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f003 fa37 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266e:	f7fe fa6b 	bl	8000b48 <main>
  bx lr
 8002672:	4770      	bx	lr
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800267c:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 8002680:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002684:	20000368 	.word	0x20000368

08002688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC1_2_IRQHandler>
	...

0800268c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_Init+0x28>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_Init+0x28>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f001 f95f 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fcf0 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 f977 	bl	80039ca <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f001 f93f 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000000 	.word	0x20000000
 8002710:	20000008 	.word	0x20000008
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x1c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_IncTick+0x20>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_IncTick+0x20>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000008 	.word	0x20000008
 8002738:	2000035c 	.word	0x2000035c

0800273c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_GetTick+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	2000035c 	.word	0x2000035c

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fff0 	bl	800273c <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffe0 	bl	800273c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0be      	b.n	8002938 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fc8a 	bl	80020f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f9ab 	bl	8002b38 <ADC_ConversionStop_Disable>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8099 	bne.w	8002926 <HAL_ADC_Init+0x18e>
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8095 	bne.w	8002926 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002804:	f023 0302 	bic.w	r3, r3, #2
 8002808:	f043 0202 	orr.w	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002818:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7b1b      	ldrb	r3, [r3, #12]
 800281e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002820:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002830:	d003      	beq.n	800283a <HAL_ADC_Init+0xa2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_ADC_Init+0xa8>
 800283a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283e:	e000      	b.n	8002842 <HAL_ADC_Init+0xaa>
 8002840:	2300      	movs	r3, #0
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7d1b      	ldrb	r3, [r3, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d119      	bne.n	8002884 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7b1b      	ldrb	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	3b01      	subs	r3, #1
 800285e:	035a      	lsls	r2, r3, #13
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e00b      	b.n	8002884 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_ADC_Init+0x1a8>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b4:	d003      	beq.n	80028be <HAL_ADC_Init+0x126>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d104      	bne.n	80028c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	051b      	lsls	r3, r3, #20
 80028c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	430a      	orrs	r2, r1
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_ADC_Init+0x1ac>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d10b      	bne.n	8002904 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002902:	e018      	b.n	8002936 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f023 0312 	bic.w	r3, r3, #18
 800290c:	f043 0210 	orr.w	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002924:	e007      	b.n	8002936 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002936:	7dfb      	ldrb	r3, [r7, #23]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	ffe1f7fd 	.word	0xffe1f7fd
 8002944:	ff1f0efe 	.word	0xff1f0efe

08002948 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x20>
 8002964:	2302      	movs	r3, #2
 8002966:	e0dc      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x1da>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d81c      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b05      	subs	r3, #5
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b05      	subs	r3, #5
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
 80029b0:	e03c      	b.n	8002a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d81c      	bhi.n	80029f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b23      	subs	r3, #35	; 0x23
 80029cc:	221f      	movs	r2, #31
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4019      	ands	r1, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b23      	subs	r3, #35	; 0x23
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
 80029f2:	e01b      	b.n	8002a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b41      	subs	r3, #65	; 0x41
 8002a06:	221f      	movs	r2, #31
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4019      	ands	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b41      	subs	r3, #65	; 0x41
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d91c      	bls.n	8002a6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68d9      	ldr	r1, [r3, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	3b1e      	subs	r3, #30
 8002a46:	2207      	movs	r2, #7
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4019      	ands	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6898      	ldr	r0, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b1e      	subs	r3, #30
 8002a60:	fa00 f203 	lsl.w	r2, r0, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	e019      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6898      	ldr	r0, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d003      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aae:	2b11      	cmp	r3, #17
 8002ab0:	d132      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d125      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d126      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ad8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d11a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9a      	lsrs	r2, r3, #18
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002af8:	e002      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f9      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x1b2>
 8002b06:	e007      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40012400 	.word	0x40012400
 8002b30:	20000000 	.word	0x20000000
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d12e      	bne.n	8002bb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b62:	f7ff fdeb 	bl	800273c <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b68:	e01b      	b.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6a:	f7ff fde7 	bl	800273c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d914      	bls.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10d      	bne.n	8002ba2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d0dc      	beq.n	8002b6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0ed      	b.n	8002da8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff faef 	bl	80021bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bee:	f7ff fda5 	bl	800273c <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bf4:	e012      	b.n	8002c1c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf6:	f7ff fda1 	bl	800273c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b0a      	cmp	r3, #10
 8002c02:	d90b      	bls.n	8002c1c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2205      	movs	r2, #5
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0c5      	b.n	8002da8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0e5      	beq.n	8002bf6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0202 	bic.w	r2, r2, #2
 8002c38:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c3a:	f7ff fd7f 	bl	800273c <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c40:	e012      	b.n	8002c68 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c42:	f7ff fd7b 	bl	800273c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b0a      	cmp	r3, #10
 8002c4e:	d90b      	bls.n	8002c68 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2205      	movs	r2, #5
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e09f      	b.n	8002da8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7e1b      	ldrb	r3, [r3, #24]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7e5b      	ldrb	r3, [r3, #25]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7e9b      	ldrb	r3, [r3, #26]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0220 	orr.w	r2, r2, #32
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0220 	bic.w	r2, r2, #32
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7edb      	ldrb	r3, [r3, #27]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0210 	orr.w	r2, r2, #16
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7f1b      	ldrb	r3, [r3, #28]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0208 	orr.w	r2, r2, #8
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0208 	bic.w	r2, r2, #8
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7f5b      	ldrb	r3, [r3, #29]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0204 	orr.w	r2, r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e007      	b.n	8002d72 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0204 	bic.w	r2, r2, #4
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	ea42 0103 	orr.w	r1, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d003      	beq.n	8002dd6 <HAL_CAN_ConfigFilter+0x26>
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	f040 80aa 	bne.w	8002f2a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d123      	bne.n	8002e58 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3248      	adds	r2, #72	; 0x48
 8002e38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	3348      	adds	r3, #72	; 0x48
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d122      	bne.n	8002ea6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3248      	adds	r2, #72	; 0x48
 8002e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	3348      	adds	r3, #72	; 0x48
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ec0:	e007      	b.n	8002ed2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002eec:	e007      	b.n	8002efe <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f1c:	f023 0201 	bic.w	r2, r3, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e006      	b.n	8002f38 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b089      	sub	sp, #36	; 0x24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d003      	beq.n	8002f6e <HAL_CAN_AddTxMessage+0x2c>
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	f040 80b8 	bne.w	80030de <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a0 	beq.w	80030ce <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d907      	bls.n	8002fae <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e09e      	b.n	80030ec <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	6809      	ldr	r1, [r1, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3318      	adds	r3, #24
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	440b      	add	r3, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e00f      	b.n	8002ffc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fec:	68f9      	ldr	r1, [r7, #12]
 8002fee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ff0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	440b      	add	r3, r1
 8002ffa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3318      	adds	r3, #24
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	440b      	add	r3, r1
 800300c:	3304      	adds	r3, #4
 800300e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	7d1b      	ldrb	r3, [r3, #20]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d111      	bne.n	800303c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3318      	adds	r3, #24
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3318      	adds	r3, #24
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	440b      	add	r3, r1
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3307      	adds	r3, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	061a      	lsls	r2, r3, #24
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3306      	adds	r3, #6
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3305      	adds	r3, #5
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	4313      	orrs	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	3204      	adds	r2, #4
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	4610      	mov	r0, r2
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	6811      	ldr	r1, [r2, #0]
 8003064:	ea43 0200 	orr.w	r2, r3, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	440b      	add	r3, r1
 800306e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003072:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3303      	adds	r3, #3
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	061a      	lsls	r2, r3, #24
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3302      	adds	r3, #2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3301      	adds	r3, #1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4313      	orrs	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4610      	mov	r0, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	ea43 0200 	orr.w	r2, r3, r0
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3318      	adds	r3, #24
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6811      	ldr	r1, [r2, #0]
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3318      	adds	r3, #24
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e00e      	b.n	80030ec <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e006      	b.n	80030ec <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3724      	adds	r7, #36	; 0x24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d002      	beq.n	8003116 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d11d      	bne.n	8003152 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d003      	beq.n	8003182 <HAL_CAN_GetRxMessage+0x24>
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f040 80f3 	bne.w	8003368 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d8      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	331b      	adds	r3, #27
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0204 	and.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	331b      	adds	r3, #27
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0d5b      	lsrs	r3, r3, #21
 80031f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	331b      	adds	r3, #27
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	331b      	adds	r3, #27
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0202 	and.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	331b      	adds	r3, #27
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	331b      	adds	r3, #27
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0a1a      	lsrs	r2, r3, #8
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0c1a      	lsrs	r2, r3, #16
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	3302      	adds	r3, #2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e1a      	lsrs	r2, r3, #24
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3303      	adds	r3, #3
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3304      	adds	r3, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0a1a      	lsrs	r2, r3, #8
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3305      	adds	r3, #5
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0c1a      	lsrs	r2, r3, #16
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3306      	adds	r3, #6
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e1a      	lsrs	r2, r3, #24
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3307      	adds	r3, #7
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e007      	b.n	8003364 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e006      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003388:	2300      	movs	r3, #0
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07c      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f983 	bl	80036ee <HAL_CAN_TxMailbox0CompleteCallback>
 80033e8:	e016      	b.n	8003418 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	e00c      	b.n	8003418 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e002      	b.n	8003418 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f986 	bl	8003724 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d024      	beq.n	800346c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f962 	bl	8003700 <HAL_CAN_TxMailbox1CompleteCallback>
 800343c:	e016      	b.n	800346c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e00c      	b.n	800346c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e002      	b.n	800346c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f965 	bl	8003736 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d024      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800347e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f941 	bl	8003712 <HAL_CAN_TxMailbox2CompleteCallback>
 8003490:	e016      	b.n	80034c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e00c      	b.n	80034c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e002      	b.n	80034c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f944 	bl	8003748 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2210      	movs	r2, #16
 80034e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2208      	movs	r2, #8
 80034fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f92a 	bl	800375a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f972 	bl	8001808 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f90a 	bl	800377e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8f2 	bl	800376c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2210      	movs	r2, #16
 80035a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8f3 	bl	8003790 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2208      	movs	r2, #8
 80035c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8eb 	bl	80037a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d07b      	beq.n	80036ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d072      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363a:	2b00      	cmp	r3, #0
 800363c:	d043      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03e      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800364e:	2b60      	cmp	r3, #96	; 0x60
 8003650:	d02b      	beq.n	80036aa <HAL_CAN_IRQHandler+0x32a>
 8003652:	2b60      	cmp	r3, #96	; 0x60
 8003654:	d82e      	bhi.n	80036b4 <HAL_CAN_IRQHandler+0x334>
 8003656:	2b50      	cmp	r3, #80	; 0x50
 8003658:	d022      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x320>
 800365a:	2b50      	cmp	r3, #80	; 0x50
 800365c:	d82a      	bhi.n	80036b4 <HAL_CAN_IRQHandler+0x334>
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d019      	beq.n	8003696 <HAL_CAN_IRQHandler+0x316>
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d826      	bhi.n	80036b4 <HAL_CAN_IRQHandler+0x334>
 8003666:	2b30      	cmp	r3, #48	; 0x30
 8003668:	d010      	beq.n	800368c <HAL_CAN_IRQHandler+0x30c>
 800366a:	2b30      	cmp	r3, #48	; 0x30
 800366c:	d822      	bhi.n	80036b4 <HAL_CAN_IRQHandler+0x334>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d002      	beq.n	8003678 <HAL_CAN_IRQHandler+0x2f8>
 8003672:	2b20      	cmp	r3, #32
 8003674:	d005      	beq.n	8003682 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003676:	e01d      	b.n	80036b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f043 0308 	orr.w	r3, r3, #8
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003680:	e019      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800368a:	e014      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003694:	e00f      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800369e:	e00a      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a8:	e005      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b2:	e000      	b.n	80036b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80036b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2204      	movs	r2, #4
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f867 	bl	80037b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
	...

080037c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <__NVIC_SetPriorityGrouping+0x44>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e4:	4013      	ands	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <__NVIC_SetPriorityGrouping+0x44>)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	60d3      	str	r3, [r2, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__NVIC_GetPriorityGrouping+0x18>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f003 0307 	and.w	r3, r3, #7
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db0b      	blt.n	8003856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	4906      	ldr	r1, [pc, #24]	; (8003860 <__NVIC_EnableIRQ+0x34>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2001      	movs	r0, #1
 800384e:	fa00 f202 	lsl.w	r2, r0, r2
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	; (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff90 	bl	8003864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff2d 	bl	80037c8 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff42 	bl	8003810 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff90 	bl	80038b8 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5f 	bl	8003864 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff35 	bl	800382c <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d005      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e051      	b.n	8003aaa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 020e 	bic.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_DMA_Abort_IT+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d029      	beq.n	8003a84 <HAL_DMA_Abort_IT+0xa0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_DMA_Abort_IT+0xd4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x9c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_DMA_Abort_IT+0xd8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01a      	beq.n	8003a7a <HAL_DMA_Abort_IT+0x96>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <HAL_DMA_Abort_IT+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d012      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x90>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <HAL_DMA_Abort_IT+0xe0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00a      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x8a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_DMA_Abort_IT+0xe4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d102      	bne.n	8003a68 <HAL_DMA_Abort_IT+0x84>
 8003a62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a66:	e00e      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a6c:	e00b      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a72:	e008      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a78:	e005      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7e:	e002      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a80:	2310      	movs	r3, #16
 8003a82:	e000      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_DMA_Abort_IT+0xe8>)
 8003a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
    } 
  }
  return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40020008 	.word	0x40020008
 8003ab8:	4002001c 	.word	0x4002001c
 8003abc:	40020030 	.word	0x40020030
 8003ac0:	40020044 	.word	0x40020044
 8003ac4:	40020058 	.word	0x40020058
 8003ac8:	4002006c 	.word	0x4002006c
 8003acc:	40020000 	.word	0x40020000

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b08b      	sub	sp, #44	; 0x2c
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae2:	e169      	b.n	8003db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8158 	bne.w	8003db2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a9a      	ldr	r2, [pc, #616]	; (8003d70 <HAL_GPIO_Init+0x2a0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d05e      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b0c:	4a98      	ldr	r2, [pc, #608]	; (8003d70 <HAL_GPIO_Init+0x2a0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d875      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b12:	4a98      	ldr	r2, [pc, #608]	; (8003d74 <HAL_GPIO_Init+0x2a4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d058      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b18:	4a96      	ldr	r2, [pc, #600]	; (8003d74 <HAL_GPIO_Init+0x2a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d86f      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b1e:	4a96      	ldr	r2, [pc, #600]	; (8003d78 <HAL_GPIO_Init+0x2a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d052      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b24:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <HAL_GPIO_Init+0x2a8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d869      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b2a:	4a94      	ldr	r2, [pc, #592]	; (8003d7c <HAL_GPIO_Init+0x2ac>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04c      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b30:	4a92      	ldr	r2, [pc, #584]	; (8003d7c <HAL_GPIO_Init+0x2ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d863      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b36:	4a92      	ldr	r2, [pc, #584]	; (8003d80 <HAL_GPIO_Init+0x2b0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d046      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b3c:	4a90      	ldr	r2, [pc, #576]	; (8003d80 <HAL_GPIO_Init+0x2b0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d85d      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b42:	2b12      	cmp	r3, #18
 8003b44:	d82a      	bhi.n	8003b9c <HAL_GPIO_Init+0xcc>
 8003b46:	2b12      	cmp	r3, #18
 8003b48:	d859      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_GPIO_Init+0x80>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003bcb 	.word	0x08003bcb
 8003b54:	08003ba5 	.word	0x08003ba5
 8003b58:	08003bb7 	.word	0x08003bb7
 8003b5c:	08003bf9 	.word	0x08003bf9
 8003b60:	08003bff 	.word	0x08003bff
 8003b64:	08003bff 	.word	0x08003bff
 8003b68:	08003bff 	.word	0x08003bff
 8003b6c:	08003bff 	.word	0x08003bff
 8003b70:	08003bff 	.word	0x08003bff
 8003b74:	08003bff 	.word	0x08003bff
 8003b78:	08003bff 	.word	0x08003bff
 8003b7c:	08003bff 	.word	0x08003bff
 8003b80:	08003bff 	.word	0x08003bff
 8003b84:	08003bff 	.word	0x08003bff
 8003b88:	08003bff 	.word	0x08003bff
 8003b8c:	08003bff 	.word	0x08003bff
 8003b90:	08003bff 	.word	0x08003bff
 8003b94:	08003bad 	.word	0x08003bad
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	4a79      	ldr	r2, [pc, #484]	; (8003d84 <HAL_GPIO_Init+0x2b4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ba2:	e02c      	b.n	8003bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	623b      	str	r3, [r7, #32]
          break;
 8003baa:	e029      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	623b      	str	r3, [r7, #32]
          break;
 8003bb4:	e024      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	623b      	str	r3, [r7, #32]
          break;
 8003bbe:	e01f      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	623b      	str	r3, [r7, #32]
          break;
 8003bc8:	e01a      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	623b      	str	r3, [r7, #32]
          break;
 8003bd6:	e013      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003be0:	2308      	movs	r3, #8
 8003be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	611a      	str	r2, [r3, #16]
          break;
 8003bea:	e009      	b.n	8003c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bec:	2308      	movs	r3, #8
 8003bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	615a      	str	r2, [r3, #20]
          break;
 8003bf6:	e003      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	623b      	str	r3, [r7, #32]
          break;
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          break;
 8003bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2bff      	cmp	r3, #255	; 0xff
 8003c04:	d801      	bhi.n	8003c0a <HAL_GPIO_Init+0x13a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_Init+0x13e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2bff      	cmp	r3, #255	; 0xff
 8003c14:	d802      	bhi.n	8003c1c <HAL_GPIO_Init+0x14c>
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	e002      	b.n	8003c22 <HAL_GPIO_Init+0x152>
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	3b08      	subs	r3, #8
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	210f      	movs	r1, #15
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80b1 	beq.w	8003db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6193      	str	r3, [r2, #24]
 8003c5c:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c68:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_GPIO_Init+0x2bc>)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	220f      	movs	r2, #15
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_GPIO_Init+0x2c0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_GPIO_Init+0x1ec>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <HAL_GPIO_Init+0x2c4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_GPIO_Init+0x1e8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	; (8003d98 <HAL_GPIO_Init+0x2c8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <HAL_GPIO_Init+0x1e4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <HAL_GPIO_Init+0x2cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_GPIO_Init+0x1e0>
 8003cac:	2303      	movs	r3, #3
 8003cae:	e006      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e004      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e002      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	f002 0203 	and.w	r2, r2, #3
 8003cc4:	0092      	lsls	r2, r2, #2
 8003cc6:	4093      	lsls	r3, r2
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cce:	492f      	ldr	r1, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x2bc>)
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	492c      	ldr	r1, [pc, #176]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cf6:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	4928      	ldr	r1, [pc, #160]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e006      	b.n	8003d2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	491e      	ldr	r1, [pc, #120]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4918      	ldr	r1, [pc, #96]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	4914      	ldr	r1, [pc, #80]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d021      	beq.n	8003da4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	490e      	ldr	r1, [pc, #56]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60cb      	str	r3, [r1, #12]
 8003d6c:	e021      	b.n	8003db2 <HAL_GPIO_Init+0x2e2>
 8003d6e:	bf00      	nop
 8003d70:	10320000 	.word	0x10320000
 8003d74:	10310000 	.word	0x10310000
 8003d78:	10220000 	.word	0x10220000
 8003d7c:	10210000 	.word	0x10210000
 8003d80:	10120000 	.word	0x10120000
 8003d84:	10110000 	.word	0x10110000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010800 	.word	0x40010800
 8003d94:	40010c00 	.word	0x40010c00
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_GPIO_Init+0x304>)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <HAL_GPIO_Init+0x304>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f47f ae8e 	bne.w	8003ae4 <HAL_GPIO_Init+0x14>
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	372c      	adds	r7, #44	; 0x2c
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e001      	b.n	8003dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	807b      	strh	r3, [r7, #2]
 8003e12:	4613      	mov	r3, r2
 8003e14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e16:	787b      	ldrb	r3, [r7, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1c:	887a      	ldrh	r2, [r7, #2]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e22:	e003      	b.n	8003e2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	041a      	lsls	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e4e:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fe60 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e12b      	b.n	80040d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe fa04 	bl	800229c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f000 fce4 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a81      	ldr	r2, [pc, #516]	; (80040dc <HAL_I2C_Init+0x274>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d807      	bhi.n	8003eec <HAL_I2C_Init+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a80      	ldr	r2, [pc, #512]	; (80040e0 <HAL_I2C_Init+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e006      	b.n	8003efa <HAL_I2C_Init+0x92>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a7d      	ldr	r2, [pc, #500]	; (80040e4 <HAL_I2C_Init+0x27c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf94      	ite	ls
 8003ef4:	2301      	movls	r3, #1
 8003ef6:	2300      	movhi	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0e7      	b.n	80040d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a78      	ldr	r2, [pc, #480]	; (80040e8 <HAL_I2C_Init+0x280>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0c9b      	lsrs	r3, r3, #18
 8003f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a6a      	ldr	r2, [pc, #424]	; (80040dc <HAL_I2C_Init+0x274>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d802      	bhi.n	8003f3c <HAL_I2C_Init+0xd4>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	e009      	b.n	8003f50 <HAL_I2C_Init+0xe8>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a69      	ldr	r2, [pc, #420]	; (80040ec <HAL_I2C_Init+0x284>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	3301      	adds	r3, #1
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	495c      	ldr	r1, [pc, #368]	; (80040dc <HAL_I2C_Init+0x274>)
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	d819      	bhi.n	8003fa4 <HAL_I2C_Init+0x13c>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e59      	subs	r1, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f84:	400b      	ands	r3, r1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_I2C_Init+0x138>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e59      	subs	r1, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9e:	e051      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e04f      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <HAL_I2C_Init+0x168>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	440b      	add	r3, r1
 8003fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e012      	b.n	8003ff6 <HAL_I2C_Init+0x18e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	0099      	lsls	r1, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Init+0x196>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e022      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10e      	bne.n	8004024 <HAL_I2C_Init+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1e58      	subs	r0, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	440b      	add	r3, r1
 8004014:	fbb0 f3f3 	udiv	r3, r0, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004022:	e00f      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1e58      	subs	r0, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	0099      	lsls	r1, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	fbb0 f3f3 	udiv	r3, r0, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	6809      	ldr	r1, [r1, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6911      	ldr	r1, [r2, #16]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	4311      	orrs	r1, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	000186a0 	.word	0x000186a0
 80040e0:	001e847f 	.word	0x001e847f
 80040e4:	003d08ff 	.word	0x003d08ff
 80040e8:	431bde83 	.word	0x431bde83
 80040ec:	10624dd3 	.word	0x10624dd3

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e272      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8087 	beq.w	800421e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004110:	4b92      	ldr	r3, [pc, #584]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00c      	beq.n	8004136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800411c:	4b8f      	ldr	r3, [pc, #572]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d112      	bne.n	800414e <HAL_RCC_OscConfig+0x5e>
 8004128:	4b8c      	ldr	r3, [pc, #560]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d10b      	bne.n	800414e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004136:	4b89      	ldr	r3, [pc, #548]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d06c      	beq.n	800421c <HAL_RCC_OscConfig+0x12c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d168      	bne.n	800421c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e24c      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004156:	d106      	bne.n	8004166 <HAL_RCC_OscConfig+0x76>
 8004158:	4b80      	ldr	r3, [pc, #512]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a7f      	ldr	r2, [pc, #508]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800415e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e02e      	b.n	80041c4 <HAL_RCC_OscConfig+0xd4>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x98>
 800416e:	4b7b      	ldr	r3, [pc, #492]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7a      	ldr	r2, [pc, #488]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b78      	ldr	r3, [pc, #480]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a77      	ldr	r2, [pc, #476]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xd4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0xbc>
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a71      	ldr	r2, [pc, #452]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6e      	ldr	r2, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xd4>
 80041ac:	4b6b      	ldr	r3, [pc, #428]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b68      	ldr	r3, [pc, #416]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a67      	ldr	r2, [pc, #412]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fab6 	bl	800273c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fe fab2 	bl	800273c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e200      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b5d      	ldr	r3, [pc, #372]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe4>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe faa2 	bl	800273c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fe fa9e 	bl	800273c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1ec      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	4b53      	ldr	r3, [pc, #332]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x10c>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d063      	beq.n	80042f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422a:	4b4c      	ldr	r3, [pc, #304]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004236:	4b49      	ldr	r3, [pc, #292]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x18c>
 8004242:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x176>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1c0      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b3d      	ldr	r3, [pc, #244]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4939      	ldr	r1, [pc, #228]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	e03a      	b.n	80042f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004284:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fe fa57 	bl	800273c <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004292:	f7fe fa53 	bl	800273c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1a1      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4927      	ldr	r1, [pc, #156]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
 80042c4:	e015      	b.n	80042f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe fa36 	bl	800273c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fe fa32 	bl	800273c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e180      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03a      	beq.n	8004374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d019      	beq.n	800433a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004306:	4b17      	ldr	r3, [pc, #92]	; (8004364 <HAL_RCC_OscConfig+0x274>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430c:	f7fe fa16 	bl	800273c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004314:	f7fe fa12 	bl	800273c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e160      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_OscConfig+0x26c>)
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004332:	2001      	movs	r0, #1
 8004334:	f000 fad8 	bl	80048e8 <RCC_Delay>
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_RCC_OscConfig+0x274>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004340:	f7fe f9fc 	bl	800273c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004346:	e00f      	b.n	8004368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004348:	f7fe f9f8 	bl	800273c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d908      	bls.n	8004368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e146      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	42420000 	.word	0x42420000
 8004364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	4b92      	ldr	r3, [pc, #584]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e9      	bne.n	8004348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a6 	beq.w	80044ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b8b      	ldr	r3, [pc, #556]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	4a87      	ldr	r2, [pc, #540]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	61d3      	str	r3, [r2, #28]
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b82      	ldr	r3, [pc, #520]	; (80045b8 <HAL_RCC_OscConfig+0x4c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_RCC_OscConfig+0x4c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a7e      	ldr	r2, [pc, #504]	; (80045b8 <HAL_RCC_OscConfig+0x4c8>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fe f9b9 	bl	800273c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe f9b5 	bl	800273c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	; 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e103      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b75      	ldr	r3, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x4c8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x312>
 80043f4:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4a6e      	ldr	r2, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6213      	str	r3, [r2, #32]
 8004400:	e02d      	b.n	800445e <HAL_RCC_OscConfig+0x36e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x334>
 800440a:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6213      	str	r3, [r2, #32]
 8004416:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	4a66      	ldr	r2, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	6213      	str	r3, [r2, #32]
 8004422:	e01c      	b.n	800445e <HAL_RCC_OscConfig+0x36e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d10c      	bne.n	8004446 <HAL_RCC_OscConfig+0x356>
 800442c:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4a60      	ldr	r2, [pc, #384]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	6213      	str	r3, [r2, #32]
 8004438:	4b5e      	ldr	r3, [pc, #376]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6213      	str	r3, [r2, #32]
 8004444:	e00b      	b.n	800445e <HAL_RCC_OscConfig+0x36e>
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4a5a      	ldr	r2, [pc, #360]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	6213      	str	r3, [r2, #32]
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4a57      	ldr	r2, [pc, #348]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004458:	f023 0304 	bic.w	r3, r3, #4
 800445c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d015      	beq.n	8004492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004466:	f7fe f969 	bl	800273c <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe f965 	bl	800273c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0b1      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ee      	beq.n	800446e <HAL_RCC_OscConfig+0x37e>
 8004490:	e014      	b.n	80044bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004492:	f7fe f953 	bl	800273c <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe f94f 	bl	800273c <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e09b      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b0:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ee      	bne.n	800449a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8087 	beq.w	80045e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d8:	4b36      	ldr	r3, [pc, #216]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d061      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d146      	bne.n	800457a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7fe f923 	bl	800273c <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fe f91f 	bl	800273c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e06d      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4921      	ldr	r1, [pc, #132]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004534:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a19      	ldr	r1, [r3, #32]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	430b      	orrs	r3, r1
 8004546:	491b      	ldr	r1, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fe f8f3 	bl	800273c <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455a:	f7fe f8ef 	bl	800273c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03d      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x46a>
 8004578:	e035      	b.n	80045e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fe f8dc 	bl	800273c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fe f8d8 	bl	800273c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e026      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x498>
 80045a6:	e01e      	b.n	80045e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e019      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
 80045bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_OscConfig+0x500>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0d0      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d910      	bls.n	8004638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b67      	ldr	r3, [pc, #412]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 0207 	bic.w	r2, r3, #7
 800461e:	4965      	ldr	r1, [pc, #404]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0b8      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004650:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800465a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004668:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	494d      	ldr	r1, [pc, #308]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d040      	beq.n	8004714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469a:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d115      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e07f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e073      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c2:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06b      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f023 0203 	bic.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4936      	ldr	r1, [pc, #216]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e4:	f7fe f82a 	bl	800273c <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ec:	f7fe f826 	bl	800273c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e053      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 020c 	and.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	429a      	cmp	r2, r3
 8004712:	d1eb      	bne.n	80046ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d210      	bcs.n	8004744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 0207 	bic.w	r2, r3, #7
 800472a:	4922      	ldr	r1, [pc, #136]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e032      	b.n	80047aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4916      	ldr	r1, [pc, #88]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	490e      	ldr	r1, [pc, #56]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004782:	f000 f821 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	490a      	ldr	r1, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <HAL_RCC_ClockConfig+0x1cc>)
 800479c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_ClockConfig+0x1d0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd ff88 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40021000 	.word	0x40021000
 80047bc:	08005d0c 	.word	0x08005d0c
 80047c0:	20000000 	.word	0x20000000
 80047c4:	20000004 	.word	0x20000004

080047c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c8:	b490      	push	{r4, r7}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCC_GetSysClockFreq+0xac>)
 80047d0:	1d3c      	adds	r4, r7, #4
 80047d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047d8:	f240 2301 	movw	r3, #513	; 0x201
 80047dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x40>
 8004802:	2b08      	cmp	r3, #8
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x46>
 8004806:	e02b      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <HAL_RCC_GetSysClockFreq+0xb4>)
 800480a:	623b      	str	r3, [r7, #32]
      break;
 800480c:	e02b      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	0c9b      	lsrs	r3, r3, #18
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3328      	adds	r3, #40	; 0x28
 8004818:	443b      	add	r3, r7
 800481a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800481e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d012      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCC_GetSysClockFreq+0xb0>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	0c5b      	lsrs	r3, r3, #17
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	3328      	adds	r3, #40	; 0x28
 8004836:	443b      	add	r3, r7
 8004838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800483c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004842:	fb03 f202 	mul.w	r2, r3, r2
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	e004      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	623b      	str	r3, [r7, #32]
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004862:	623b      	str	r3, [r7, #32]
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6a3b      	ldr	r3, [r7, #32]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bc90      	pop	{r4, r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	08005cfc 	.word	0x08005cfc
 8004878:	40021000 	.word	0x40021000
 800487c:	007a1200 	.word	0x007a1200
 8004880:	003d0900 	.word	0x003d0900

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b02      	ldr	r3, [pc, #8]	; (8004894 <HAL_RCC_GetHCLKFreq+0x10>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	20000000 	.word	0x20000000

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff2 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	08005d1c 	.word	0x08005d1c

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffde 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	0adb      	lsrs	r3, r3, #11
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08005d1c 	.word	0x08005d1c

080048e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <RCC_Delay+0x34>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <RCC_Delay+0x38>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0a5b      	lsrs	r3, r3, #9
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004904:	bf00      	nop
  }
  while (Delay --);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1e5a      	subs	r2, r3, #1
 800490a:	60fa      	str	r2, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f9      	bne.n	8004904 <RCC_Delay+0x1c>
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	20000000 	.word	0x20000000
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d07d      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004944:	4b4f      	ldr	r3, [pc, #316]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10d      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004950:	4b4c      	ldr	r3, [pc, #304]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4a4b      	ldr	r2, [pc, #300]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	61d3      	str	r3, [r2, #28]
 800495c:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b46      	ldr	r3, [pc, #280]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d118      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004978:	4b43      	ldr	r3, [pc, #268]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a42      	ldr	r2, [pc, #264]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004984:	f7fd feda 	bl	800273c <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	e008      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498c:	f7fd fed6 	bl	800273c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e06d      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b3a      	ldr	r3, [pc, #232]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d02e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d027      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c8:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d2:	4b2e      	ldr	r3, [pc, #184]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049de:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d014      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fd fea5 	bl	800273c <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fd fea1 	bl	800273c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e036      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ee      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4917      	ldr	r1, [pc, #92]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	490b      	ldr	r1, [pc, #44]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4904      	ldr	r1, [pc, #16]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	42420440 	.word	0x42420440

08004a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e041      	b.n	8004b26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fc78 	bl	80023ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fb68 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e093      	b.n	8004c6a <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd fbe0 	bl	800231c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f000 fb0e 	bl	80051a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bce:	f023 030c 	bic.w	r3, r3, #12
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	4313      	orrs	r3, r2
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	011a      	lsls	r2, r3, #4
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	031b      	lsls	r3, r3, #12
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c0c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c92:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c9a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d110      	bne.n	8004cc4 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ca8:	7b7b      	ldrb	r3, [r7, #13]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e089      	b.n	8004dc6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc2:	e031      	b.n	8004d28 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d110      	bne.n	8004cec <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd0:	7b3b      	ldrb	r3, [r7, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e075      	b.n	8004dc6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cea:	e01d      	b.n	8004d28 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d108      	bne.n	8004d04 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	7bbb      	ldrb	r3, [r7, #14]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf8:	7b7b      	ldrb	r3, [r7, #13]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cfe:	7b3b      	ldrb	r3, [r7, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e05e      	b.n	8004dc6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d010      	beq.n	8004d56 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d34:	e01f      	b.n	8004d76 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fc1a 	bl	8005578 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0202 	orr.w	r2, r2, #2
 8004d52:	60da      	str	r2, [r3, #12]
      break;
 8004d54:	e02e      	b.n	8004db4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fc0a 	bl	8005578 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0204 	orr.w	r2, r2, #4
 8004d72:	60da      	str	r2, [r3, #12]
      break;
 8004d74:	e01e      	b.n	8004db4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fbfa 	bl	8005578 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fbf3 	bl	8005578 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0202 	orr.w	r2, r2, #2
 8004da0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0204 	orr.w	r2, r2, #4
 8004db0:	60da      	str	r2, [r3, #12]
      break;
 8004db2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d122      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d11b      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f06f 0202 	mvn.w	r2, #2
 8004dfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fb fe65 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8004e16:	e005      	b.n	8004e24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9a8 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9ae 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d122      	bne.n	8004e7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d11b      	bne.n	8004e7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f06f 0204 	mvn.w	r2, #4
 8004e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fb fe3b 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8004e6a:	e005      	b.n	8004e78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f97e 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f984 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d122      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d11b      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0208 	mvn.w	r2, #8
 8004ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fb fe11 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8004ebe:	e005      	b.n	8004ecc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f954 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f95a 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d122      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d11b      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0210 	mvn.w	r2, #16
 8004ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2208      	movs	r2, #8
 8004efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fb fde7 	bl	8000ae0 <HAL_TIM_IC_CaptureCallback>
 8004f12:	e005      	b.n	8004f20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f92a 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f930 	bl	8005180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0201 	mvn.w	r2, #1
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f905 	bl	800515c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb88 	bl	800568e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8f4 	bl	8005192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0220 	mvn.w	r2, #32
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb53 	bl	800567c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0ac      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f200 809f 	bhi.w	8005148 <HAL_TIM_PWM_ConfigChannel+0x168>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005045 	.word	0x08005045
 8005014:	08005149 	.word	0x08005149
 8005018:	08005149 	.word	0x08005149
 800501c:	08005149 	.word	0x08005149
 8005020:	08005085 	.word	0x08005085
 8005024:	08005149 	.word	0x08005149
 8005028:	08005149 	.word	0x08005149
 800502c:	08005149 	.word	0x08005149
 8005030:	080050c7 	.word	0x080050c7
 8005034:	08005149 	.word	0x08005149
 8005038:	08005149 	.word	0x08005149
 800503c:	08005149 	.word	0x08005149
 8005040:	08005107 	.word	0x08005107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f90c 	bl	8005268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e062      	b.n	800514a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f952 	bl	8005334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e041      	b.n	800514a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f99b 	bl	8005408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e021      	b.n	800514a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f9e5 	bl	80054dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e000      	b.n	800514a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a29      	ldr	r2, [pc, #164]	; (800525c <TIM_Base_SetConfig+0xb8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x30>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x30>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a26      	ldr	r2, [pc, #152]	; (8005260 <TIM_Base_SetConfig+0xbc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x30>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a25      	ldr	r2, [pc, #148]	; (8005264 <TIM_Base_SetConfig+0xc0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <TIM_Base_SetConfig+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_Base_SetConfig+0x62>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f4:	d007      	beq.n	8005206 <TIM_Base_SetConfig+0x62>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a19      	ldr	r2, [pc, #100]	; (8005260 <TIM_Base_SetConfig+0xbc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_Base_SetConfig+0x62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <TIM_Base_SetConfig+0xc0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d108      	bne.n	8005218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a07      	ldr	r2, [pc, #28]	; (800525c <TIM_Base_SetConfig+0xb8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d103      	bne.n	800524c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	615a      	str	r2, [r3, #20]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800

08005268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0302 	bic.w	r3, r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_OC1_SetConfig+0xc8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10c      	bne.n	80052de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0308 	bic.w	r3, r3, #8
 80052ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 0304 	bic.w	r3, r3, #4
 80052dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <TIM_OC1_SetConfig+0xc8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00

08005334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0210 	bic.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0320 	bic.w	r3, r3, #32
 800537e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <TIM_OC2_SetConfig+0xd0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10d      	bne.n	80053b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a14      	ldr	r2, [pc, #80]	; (8005404 <TIM_OC2_SetConfig+0xd0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d113      	bne.n	80053e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00

08005408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <TIM_OC3_SetConfig+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <TIM_OC3_SetConfig+0xd0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00

080054dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	031b      	lsls	r3, r3, #12
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <TIM_OC4_SetConfig+0x98>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d109      	bne.n	8005550 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	019b      	lsls	r3, r3, #6
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00

08005578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e046      	b.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00e      	beq.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d009      	beq.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d004      	beq.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a10      	ldr	r2, [pc, #64]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d10c      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4313      	orrs	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800

0800567c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e03f      	b.n	8005732 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc feda 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f961 	bl	80059ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b20      	cmp	r3, #32
 8005752:	d130      	bne.n	80057b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Transmit_IT+0x26>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e029      	b.n	80057b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UART_Transmit_IT+0x38>
 800576e:	2302      	movs	r3, #2
 8005770:	e022      	b.n	80057b8 <HAL_UART_Transmit_IT+0x7e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2221      	movs	r2, #33	; 0x21
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e000      	b.n	80057b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d11d      	bne.n	8005818 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_UART_Receive_IT+0x26>
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e016      	b.n	800581a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Receive_IT+0x38>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e00f      	b.n	800581a <HAL_UART_Receive_IT+0x58>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f87b 	bl	800590a <UART_Start_Receive_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	e000      	b.n	800581a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800583a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	2b01      	cmp	r3, #1
 8005852:	d107      	bne.n	8005864 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0210 	bic.w	r2, r2, #16
 8005862:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d02d      	beq.n	80058ce <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005880:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_UART_AbortReceive_IT+0xd0>)
 8005890:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe f8a4 	bl	80039e4 <HAL_DMA_Abort_IT>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d022      	beq.n	80058e8 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
 80058b0:	e01a      	b.n	80058e8 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f816 	bl	80058f8 <HAL_UART_AbortReceiveCpltCallback>
 80058cc:	e00c      	b.n	80058e8 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f808 	bl	80058f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	0800597d 	.word	0x0800597d

080058f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2222      	movs	r2, #34	; 0x22
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0220 	orr.w	r2, r2, #32
 800596e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff ffaa 	bl	80058f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059e6:	f023 030c 	bic.w	r3, r3, #12
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	430b      	orrs	r3, r1
 80059f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <UART_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe ff54 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7fe ff3c 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <UART_SetConfig+0x118>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	0119      	lsls	r1, r3, #4
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009a      	lsls	r2, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <UART_SetConfig+0x118>)
 8005a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2064      	movs	r0, #100	; 0x64
 8005a62:	fb00 f303 	mul.w	r3, r0, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	; 0x32
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <UART_SetConfig+0x118>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a78:	4419      	add	r1, r3
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a90:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <UART_SetConfig+0x118>)
 8005a92:	fba3 0302 	umull	r0, r3, r3, r2
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2064      	movs	r0, #100	; 0x64
 8005a9a:	fb00 f303 	mul.w	r3, r0, r3
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	3332      	adds	r3, #50	; 0x32
 8005aa4:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <UART_SetConfig+0x118>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40013800 	.word	0x40013800
 8005ac4:	51eb851f 	.word	0x51eb851f

08005ac8 <_ZdlPvj>:
 8005ac8:	f000 b805 	b.w	8005ad6 <_ZdlPv>

08005acc <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8005acc:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	4770      	bx	lr

08005ad6 <_ZdlPv>:
 8005ad6:	f000 b825 	b.w	8005b24 <free>
	...

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	2600      	movs	r6, #0
 8005ae0:	4d0c      	ldr	r5, [pc, #48]	; (8005b14 <__libc_init_array+0x38>)
 8005ae2:	4c0d      	ldr	r4, [pc, #52]	; (8005b18 <__libc_init_array+0x3c>)
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	f000 f880 	bl	8005bf0 <_init>
 8005af0:	2600      	movs	r6, #0
 8005af2:	4d0a      	ldr	r5, [pc, #40]	; (8005b1c <__libc_init_array+0x40>)
 8005af4:	4c0a      	ldr	r4, [pc, #40]	; (8005b20 <__libc_init_array+0x44>)
 8005af6:	1b64      	subs	r4, r4, r5
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	08005d24 	.word	0x08005d24
 8005b18:	08005d24 	.word	0x08005d24
 8005b1c:	08005d24 	.word	0x08005d24
 8005b20:	08005d2c 	.word	0x08005d2c

08005b24 <free>:
 8005b24:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <free+0xc>)
 8005b26:	4601      	mov	r1, r0
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	f000 b80b 	b.w	8005b44 <_free_r>
 8005b2e:	bf00      	nop
 8005b30:	2000000c 	.word	0x2000000c

08005b34 <memset>:
 8005b34:	4603      	mov	r3, r0
 8005b36:	4402      	add	r2, r0
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <memset+0xa>
 8005b3c:	4770      	bx	lr
 8005b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b42:	e7f9      	b.n	8005b38 <memset+0x4>

08005b44 <_free_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4605      	mov	r5, r0
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d040      	beq.n	8005bce <_free_r+0x8a>
 8005b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b50:	1f0c      	subs	r4, r1, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfb8      	it	lt
 8005b56:	18e4      	addlt	r4, r4, r3
 8005b58:	f000 f83c 	bl	8005bd4 <__malloc_lock>
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <_free_r+0x8c>)
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	b933      	cbnz	r3, 8005b70 <_free_r+0x2c>
 8005b62:	6063      	str	r3, [r4, #4]
 8005b64:	6014      	str	r4, [r2, #0]
 8005b66:	4628      	mov	r0, r5
 8005b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6c:	f000 b838 	b.w	8005be0 <__malloc_unlock>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d908      	bls.n	8005b86 <_free_r+0x42>
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	1821      	adds	r1, r4, r0
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	bf01      	itttt	eq
 8005b7c:	6819      	ldreq	r1, [r3, #0]
 8005b7e:	685b      	ldreq	r3, [r3, #4]
 8005b80:	1809      	addeq	r1, r1, r0
 8005b82:	6021      	streq	r1, [r4, #0]
 8005b84:	e7ed      	b.n	8005b62 <_free_r+0x1e>
 8005b86:	461a      	mov	r2, r3
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b10b      	cbz	r3, 8005b90 <_free_r+0x4c>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d9fa      	bls.n	8005b86 <_free_r+0x42>
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	1850      	adds	r0, r2, r1
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d10b      	bne.n	8005bb0 <_free_r+0x6c>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	4401      	add	r1, r0
 8005b9c:	1850      	adds	r0, r2, r1
 8005b9e:	4283      	cmp	r3, r0
 8005ba0:	6011      	str	r1, [r2, #0]
 8005ba2:	d1e0      	bne.n	8005b66 <_free_r+0x22>
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4401      	add	r1, r0
 8005baa:	6011      	str	r1, [r2, #0]
 8005bac:	6053      	str	r3, [r2, #4]
 8005bae:	e7da      	b.n	8005b66 <_free_r+0x22>
 8005bb0:	d902      	bls.n	8005bb8 <_free_r+0x74>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	e7d6      	b.n	8005b66 <_free_r+0x22>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	1821      	adds	r1, r4, r0
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf01      	itttt	eq
 8005bc0:	6819      	ldreq	r1, [r3, #0]
 8005bc2:	685b      	ldreq	r3, [r3, #4]
 8005bc4:	1809      	addeq	r1, r1, r0
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6063      	str	r3, [r4, #4]
 8005bca:	6054      	str	r4, [r2, #4]
 8005bcc:	e7cb      	b.n	8005b66 <_free_r+0x22>
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000360 	.word	0x20000360

08005bd4 <__malloc_lock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_lock+0x8>)
 8005bd6:	f000 b809 	b.w	8005bec <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000364 	.word	0x20000364

08005be0 <__malloc_unlock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_unlock+0x8>)
 8005be2:	f000 b804 	b.w	8005bee <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	20000364 	.word	0x20000364

08005bec <__retarget_lock_acquire_recursive>:
 8005bec:	4770      	bx	lr

08005bee <__retarget_lock_release_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
