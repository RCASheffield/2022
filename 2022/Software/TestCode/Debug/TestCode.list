
TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005148  08005148  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005148  08005148  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005148  08005148  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000074  080051cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080051cc  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001818e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce4  00000000  00000000  0003822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b33e  00000000  00000000  0003d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138de  00000000  00000000  000589a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f29d  00000000  00000000  0006c284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005920  00000000  00000000  0010b574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005014 	.word	0x08005014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005014 	.word	0x08005014

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_CAN_RxFifo1MsgPendingCallback>:

int datacheck = 1;
int j = 0;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f002 f923 	bl	8002862 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800061e:	691b      	ldr	r3, [r3, #16]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d102      	bne.n	800062a <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck = 1;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
	}
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000318 	.word	0x20000318
 8000638:	2000037c 	.word	0x2000037c
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_TIM_IC_CaptureCallback>:
int16_t position; // used in UserCode0 of stm32f1xx_it.c
float speed = 0;
float rpm = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000650:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_TIM_IC_CaptureCallback+0x34>)
 800065a:	801a      	strh	r2, [r3, #0]
	position = count;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_TIM_IC_CaptureCallback+0x34>)
 800065e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000664:	801a      	strh	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000094 	.word	0x20000094
 8000674:	20000098 	.word	0x20000098
 8000678:	20000220 	.word	0x20000220

0800067c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == INDEX_Pin)
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800068c:	d105      	bne.n	800069a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		revolutions++;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000698:	801a      	strh	r2, [r3, #0]
	}
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000090 	.word	0x20000090

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f001 fc7e 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f81c 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fa66 	bl	8000b84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 fa3a 	bl	8000b30 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80006bc:	f000 f8ee 	bl	800089c <MX_CAN_Init>
  MX_ADC1_Init();
 80006c0:	f000 f870 	bl	80007a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006c4:	f000 f96c 	bl	80009a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006c8:	f000 f9c2 	bl	8000a50 <MX_TIM3_Init>
  MX_I2C2_Init();
 80006cc:	f000 f93a 	bl	8000944 <MX_I2C2_Init>
  MX_ADC2_Init();
 80006d0:	f000 f8a6 	bl	8000820 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // Activate the encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80006d4:	213c      	movs	r1, #60	; 0x3c
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <main+0x40>)
 80006d8:	f003 fdcd 	bl	8004276 <HAL_TIM_Encoder_Start_IT>


  mainboard();
 80006dc:	f000 fdcc 	bl	8001278 <mainboard>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 80006e0:	2064      	movs	r0, #100	; 0x64
 80006e2:	f001 fcc5 	bl	8002070 <HAL_Delay>
 80006e6:	e7fb      	b.n	80006e0 <main+0x38>
 80006e8:	200002cc 	.word	0x200002cc

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fc28 	bl	8004f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000738:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	4618      	mov	r0, r3
 8000744:	f002 ffd6 	bl	80036f4 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800074e:	f000 fac7 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000762:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2102      	movs	r1, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fa40 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800077a:	f000 fab1 	bl	8000ce0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800077e:	2302      	movs	r3, #2
 8000780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000786:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fbcc 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000796:	f000 faa3 	bl	8000ce0 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_ADC1_Init+0x74>)
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <MX_ADC1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0x74>)
 80007ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_ADC1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_ADC1_Init+0x74>)
 80007e2:	f001 fc69 	bl	80020b8 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 fa78 	bl	8000ce0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC1_Init+0x74>)
 8000802:	f001 fd31 	bl	8002268 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800080c:	f000 fa68 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000294 	.word	0x20000294
 800081c:	40012400 	.word	0x40012400

08000820 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_ADC2_Init+0x74>)
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <MX_ADC2_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_ADC2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_ADC2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_ADC2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_ADC2_Init+0x74>)
 800084a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800084e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_ADC2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_ADC2_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_ADC2_Init+0x74>)
 800085e:	f001 fc2b 	bl	80020b8 <HAL_ADC_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 fa3a 	bl	8000ce0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086c:	2304      	movs	r3, #4
 800086e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000870:	2301      	movs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_ADC2_Init+0x74>)
 800087e:	f001 fcf3 	bl	8002268 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000888:	f000 fa2a 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000019c 	.word	0x2000019c
 8000898:	40012800 	.word	0x40012800

0800089c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_CAN_Init+0xa0>)
 80008a4:	4a26      	ldr	r2, [pc, #152]	; (8000940 <MX_CAN_Init+0xa4>)
 80008a6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_CAN_Init+0xa0>)
 80008aa:	2210      	movs	r2, #16
 80008ac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_CAN_Init+0xa0>)
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_CAN_Init+0xa0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_CAN_Init+0xa0>)
 80008be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_CAN_Init+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_CAN_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_CAN_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_CAN_Init+0xa0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_CAN_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_CAN_Init+0xa0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_CAN_Init+0xa0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008ee:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_CAN_Init+0xa0>)
 80008f0:	f001 fdf3 	bl	80024da <HAL_CAN_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80008fa:	f000 f9f1 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000902:	230a      	movs	r3, #10
 8000904:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 800090a:	f242 0360 	movw	r3, #8288	; 0x2060
 800090e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8000914:	f242 0360 	movw	r3, #8288	; 0x2060
 8000918:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_CAN_Init+0xa0>)
 8000930:	f001 fece 	bl	80026d0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000224 	.word	0x20000224
 8000940:	40006400 	.word	0x40006400

08000944 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C2_Init+0x50>)
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <MX_I2C2_Init+0x54>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C2_Init+0x50>)
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_I2C2_Init+0x58>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C2_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_I2C2_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_I2C2_Init+0x50>)
 8000962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000966:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_I2C2_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_I2C2_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_I2C2_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_I2C2_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_I2C2_Init+0x50>)
 8000982:	f002 fd73 	bl	800346c <HAL_I2C_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800098c:	f000 f9a8 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200001cc 	.word	0x200001cc
 8000998:	40005800 	.word	0x40005800
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2224      	movs	r2, #36	; 0x24
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 face 	bl	8004f50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM1_Init+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_TIM1_Init+0xa8>)
 8000a14:	f003 fb8d 	bl	8004132 <HAL_TIM_Encoder_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a1e:	f000 f95f 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_TIM1_Init+0xa8>)
 8000a30:	f004 f8c8 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a3a:	f000 f951 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002cc 	.word	0x200002cc
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_TIM3_Init+0xdc>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a78:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a98:	4823      	ldr	r0, [pc, #140]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000a9a:	f003 fafb 	bl	8004094 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 f91c 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481c      	ldr	r0, [pc, #112]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000ab8:	f004 f884 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ac2:	f000 f90d 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	; 0x60
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000ade:	f003 fd81 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 f8fa 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2204      	movs	r2, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000af4:	f003 fd76 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000afe:	f000 f8ef 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000b0a:	f003 fd6b 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b14:	f000 f8e4 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM3_Init+0xd8>)
 8000b1a:	f001 f8f5 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000024c 	.word	0x2000024c
 8000b2c:	40000400 	.word	0x40000400

08000b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART2_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b68:	f004 f89c 	bl	8004ca4 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 f8b5 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000320 	.word	0x20000320
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0320 	and.w	r3, r3, #32
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <MX_GPIO_Init+0x148>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOCO_TX_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2122      	movs	r1, #34	; 0x22
 8000bfc:	4834      	ldr	r0, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000bfe:	f002 fc04 	bl	800340a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLOSE_INTERLOCK_TRIGGER_Pin|HORN_CONTROL_Pin|BRAKE_CONTROL_Pin|RELAY_ENABLE_Pin
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 61ce 	mov.w	r1, #1648	; 0x670
 8000c08:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <MX_GPIO_Init+0x150>)
 8000c0a:	f002 fbfe 	bl	800340a <HAL_GPIO_WritePin>
                          |RELAY_SELECT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VARIANT_INDICATOR_Pin VINT_PRESENT_Pin ESTOP2_PRESENT_Pin ESTOP1_PRESENT_Pin
                           INTERLOCK_IN_PRESENT_Pin BRAKE_OVERCURRENT_Pin BRAKE_UNDERCURRENT_Pin RELAY_OVERCURRENT_Pin
                           RELAY_UNDERCURRENT_Pin */
  GPIO_InitStruct.Pin = VARIANT_INDICATOR_Pin|VINT_PRESENT_Pin|ESTOP2_PRESENT_Pin|ESTOP1_PRESENT_Pin
 8000c0e:	f643 138f 	movw	r3, #14735	; 0x398f
 8000c12:	613b      	str	r3, [r7, #16]
                          |INTERLOCK_IN_PRESENT_Pin|BRAKE_OVERCURRENT_Pin|BRAKE_UNDERCURRENT_Pin|RELAY_OVERCURRENT_Pin
                          |RELAY_UNDERCURRENT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0x150>)
 8000c24:	f002 fa56 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOCO_TX_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LOCO_TX_ENABLE_Pin|LD2_Pin;
 8000c28:	2322      	movs	r3, #34	; 0x22
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4824      	ldr	r0, [pc, #144]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000c40:	f002 fa48 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLOSE_INTERLOCK_TRIGGER_Pin HORN_CONTROL_Pin BRAKE_CONTROL_Pin RELAY_ENABLE_Pin
                           RELAY_SELECT_Pin */
  GPIO_InitStruct.Pin = CLOSE_INTERLOCK_TRIGGER_Pin|HORN_CONTROL_Pin|BRAKE_CONTROL_Pin|RELAY_ENABLE_Pin
 8000c44:	f44f 63ce 	mov.w	r3, #1648	; 0x670
 8000c48:	613b      	str	r3, [r7, #16]
                          |RELAY_SELECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <MX_GPIO_Init+0x150>)
 8000c5e:	f002 fa39 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISOLATED_INPUT_UPDATED_Pin nBODYWORK_CLOSED_Pin */
  GPIO_InitStruct.Pin = ISOLATED_INPUT_UPDATED_Pin|nBODYWORK_CLOSED_Pin;
 8000c62:	2322      	movs	r3, #34	; 0x22
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <MX_GPIO_Init+0x158>)
 8000c76:	f002 fa2d 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDEX_Pin */
  GPIO_InitStruct.Pin = INDEX_Pin;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_GPIO_Init+0x154>)
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INDEX_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <MX_GPIO_Init+0x14c>)
 8000c90:	f002 fa20 	bl	80030d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2007      	movs	r0, #7
 8000c9a:	f002 f9e4 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f002 f9fd 	bl	800309e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2017      	movs	r0, #23
 8000caa:	f002 f9dc 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cae:	2017      	movs	r0, #23
 8000cb0:	f002 f9f5 	bl	800309e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2028      	movs	r0, #40	; 0x28
 8000cba:	f002 f9d4 	bl	8003066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cbe:	2028      	movs	r0, #40	; 0x28
 8000cc0:	f002 f9ed 	bl	800309e <HAL_NVIC_EnableIRQ>

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>

08000cea <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f805 	bl	8000d02 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
#endif
      }
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fad5 	bl	80012e0 <_ZNSaISt10_List_nodeIP6PacketEED1Ev>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fab8 	bl	80012c0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implC1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZNSt7__cxx114listIP6PacketSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffeb 	bl	8000d40 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EEC1Ev>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_Z11send_packetP20__UART_HandleTypeDefhhPhh>:
		HAL_UART_Receive_IT(huart, &receive_buffer.start, (uint16_t) 1);
		return;
	}
}

void send_packet(UART_HandleTypeDef *huart, uint8_t address, uint8_t command, uint8_t *data, uint8_t length) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	72fb      	strb	r3, [r7, #11]
 8000d82:	4613      	mov	r3, r2
 8000d84:	72bb      	strb	r3, [r7, #10]
	// Wait for any ongoing transmission to finish
	while (transmit_busy);
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe8>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0x1e>
 8000d90:	e7f9      	b.n	8000d86 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0x12>
	transmit_busy = true;
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xe8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

	// Generate packet
	transmit_buffer.start = 0xff;
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	701a      	strb	r2, [r3, #0]
	transmit_buffer.address = address;
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	b2d9      	uxtb	r1, r3
 8000da6:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000da8:	7853      	ldrb	r3, [r2, #1]
 8000daa:	f361 1387 	bfi	r3, r1, #6, #2
 8000dae:	7053      	strb	r3, [r2, #1]
	transmit_buffer.command = command;
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	b2d9      	uxtb	r1, r3
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000dba:	7853      	ldrb	r3, [r2, #1]
 8000dbc:	f361 1305 	bfi	r3, r1, #4, #2
 8000dc0:	7053      	strb	r3, [r2, #1]
	transmit_buffer.length = length;
 8000dc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000dce:	7853      	ldrb	r3, [r2, #1]
 8000dd0:	f361 0303 	bfi	r3, r1, #0, #4
 8000dd4:	7053      	strb	r3, [r2, #1]
	transmit_buffer.checksum = transmit_buffer.info;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000dd8:	785a      	ldrb	r2, [r3, #1]
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000ddc:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < length; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	da17      	bge.n	8000e1c <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xa8>
		transmit_buffer.data[i] = data[i];
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	7819      	ldrb	r1, [r3, #0]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
		transmit_buffer.checksum += data[i];
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000e02:	7c9a      	ldrb	r2, [r3, #18]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	440b      	add	r3, r1
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000e12:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < length; i++) {
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e7e2      	b.n	8000de2 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0x6e>
	}

	// Move checksum to end of packet
	if (length < 16) transmit_buffer.data[length] = transmit_buffer.checksum;
 8000e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d807      	bhi.n	8000e34 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xc0>
 8000e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000e2a:	7c91      	ldrb	r1, [r2, #18]
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	709a      	strb	r2, [r3, #2]

	// Start transmission
	HAL_GPIO_WritePin(LOCO_TX_ENABLE_GPIO_Port, LOCO_TX_ENABLE_Pin, (GPIO_PinState)1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2102      	movs	r1, #2
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xf0>)
 8000e3a:	f002 fae6 	bl	800340a <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(huart, (uint8_t*)&transmit_buffer, (uint16_t)length+3);
 8000e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3303      	adds	r3, #3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <_Z11send_packetP20__UART_HandleTypeDefhhPhh+0xec>)
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f003 ff76 	bl	8004d3e <HAL_UART_Transmit_IT>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000b7 	.word	0x200000b7
 8000e60:	200000a4 	.word	0x200000a4
 8000e64:	40010800 	.word	0x40010800

08000e68 <_Z10get_packetv>:

// Get first packet in queue
Packet* get_packet() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	return incoming_packets.front();
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <_Z10get_packetv+0x14>)
 8000e6e:	f000 fa53 	bl	8001318 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5frontEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	681b      	ldr	r3, [r3, #0]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000b8 	.word	0x200000b8

08000e80 <_Z12clear_packetP6Packet>:

// Remove packet from incoming queue
void clear_packet(Packet* packet) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	incoming_packets.remove(packet);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <_Z12clear_packetP6Packet+0x28>)
 8000e8e:	f000 fa56 	bl	800133e <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_>
	delete packet;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <_Z12clear_packetP6Packet+0x20>
 8000e98:	2113      	movs	r1, #19
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 f824 	bl	8004ee8 <_ZdlPvj>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000b8 	.word	0x200000b8

08000eac <_Z16packet_availablev>:

// Check if valid packet in queue and remove any invalid
bool packet_available() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	while (incoming_packets.size() > 0) {
 8000eb2:	481e      	ldr	r0, [pc, #120]	; (8000f2c <_Z16packet_availablev+0x80>)
 8000eb4:	f000 faab 	bl	800140e <_ZNKSt7__cxx114listIP6PacketSaIS2_EE4sizeEv>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d02c      	beq.n	8000f22 <_Z16packet_availablev+0x76>
		Packet* packet = get_packet();
 8000ec8:	f7ff ffce 	bl	8000e68 <_Z10get_packetv>
 8000ecc:	6078      	str	r0, [r7, #4]
		uint8_t calculated_checksum = packet->info;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < packet->length; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	da0b      	bge.n	8000f02 <_Z16packet_availablev+0x56>
			calculated_checksum += packet->data[i];
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < packet->length; i++) {
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	e7ea      	b.n	8000ed8 <_Z16packet_availablev+0x2c>
		}
		if (packet->checksum == calculated_checksum) return true;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7c9b      	ldrb	r3, [r3, #18]
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d101      	bne.n	8000f10 <_Z16packet_availablev+0x64>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e009      	b.n	8000f24 <_Z16packet_availablev+0x78>
		clear_packet(packet);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffb5 	bl	8000e80 <_Z12clear_packetP6Packet>
		invalid_packet_count += 1;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <_Z16packet_availablev+0x84>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <_Z16packet_availablev+0x84>)
 8000f1e:	6013      	str	r3, [r2, #0]
	while (incoming_packets.size() > 0) {
 8000f20:	e7c7      	b.n	8000eb2 <_Z16packet_availablev+0x6>
	}

	return false;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000b8 	.word	0x200000b8
 8000f30:	200000c4 	.word	0x200000c4

08000f34 <_ZN10LocoModuleC1EiP12ErrorHandler>:
	// Module variable info
	enum { STATE, SPEED_SETPOINT, ACTUAL_SPEED, HORN, VAR_MAX };
	uint8_t* data_pointers [VAR_MAX] = {(uint8_t*)&state, (uint8_t*)&speed_setpoint, (uint8_t*)&actual_speed, (uint8_t*)&horn};
	uint8_t data_sizes [VAR_MAX] = {sizeof(state), sizeof(speed_setpoint), sizeof(actual_speed), sizeof(horn)};

	LocoModule(int _id, ErrorHandler* _error_handler) {
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	731a      	strb	r2, [r3, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	761a      	strb	r2, [r3, #24]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f103 020c 	add.w	r2, r3, #12
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	61da      	str	r2, [r3, #28]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f103 0210 	add.w	r2, r3, #16
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f103 0214 	add.w	r2, r3, #20
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f103 0218 	add.w	r2, r3, #24
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <_ZN10LocoModuleC1EiP12ErrorHandler+0x60>)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
		id = _id;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	601a      	str	r2, [r3, #0]
		error_handler = _error_handler;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	609a      	str	r2, [r3, #8]
	}
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	080050e4 	.word	0x080050e4

08000f98 <_ZN10LocoModule9send_dataEh>:

	void send_data(uint8_t variable_index) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
		uint8_t new_data[length + 1];
		new_data[0] = variable_index;
		for (int i = 0; i < length; i++) {
			new_data[i + 1] = data[i];
		}
		send_packet(huart, id, OK, new_data, (uint16_t) length + 1);
 8000fa4:	466b      	mov	r3, sp
 8000fa6:	461d      	mov	r5, r3
		uint8_t length = data_sizes[variable_index];
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fb2:	76fb      	strb	r3, [r7, #27]
		uint8_t* data = data_pointers[variable_index];
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	3306      	adds	r3, #6
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	617b      	str	r3, [r7, #20]
		uint8_t new_data[length + 1];
 8000fc2:	7efc      	ldrb	r4, [r7, #27]
 8000fc4:	613c      	str	r4, [r7, #16]
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f04f 0100 	mov.w	r1, #0
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	00cb      	lsls	r3, r1, #3
 8000fda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fde:	00c2      	lsls	r2, r0, #3
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f04f 0100 	mov.w	r1, #0
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	00cb      	lsls	r3, r1, #3
 8000ff4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ff8:	00c2      	lsls	r2, r0, #3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	3307      	adds	r3, #7
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	ebad 0d03 	sub.w	sp, sp, r3
 8001008:	ab02      	add	r3, sp, #8
 800100a:	3300      	adds	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
		new_data[0] = variable_index;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	7efb      	ldrb	r3, [r7, #27]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	429a      	cmp	r2, r3
 800101e:	da0b      	bge.n	8001038 <_ZN10LocoModule9send_dataEh+0xa0>
			new_data[i + 1] = data[i];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	441a      	add	r2, r3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	7811      	ldrb	r1, [r2, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < length; i++) {
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e7ef      	b.n	8001018 <_ZN10LocoModule9send_dataEh+0x80>
		send_packet(huart, id, OK, new_data, (uint16_t) length + 1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b2d9      	uxtb	r1, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	7efb      	ldrb	r3, [r7, #27]
 8001046:	3301      	adds	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	2200      	movs	r2, #0
 8001050:	f7ff fe90 	bl	8000d74 <_Z11send_packetP20__UART_HandleTypeDefhhPhh>
 8001054:	46ad      	mov	sp, r5
	}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}

0800105e <_ZN10LocoModule12parse_packetEP6Packet>:
	void request_error() {
		uint8_t data[0];
		send_packet(huart, id, ERROR, data, (uint16_t) 0);
	}

	void parse_packet(Packet *packet) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
		if (packet->command == OK) {
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d12f      	bne.n	80010d6 <_ZN10LocoModule12parse_packetEP6Packet+0x78>
			uint8_t variable_index = packet->data[0];
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	72fb      	strb	r3, [r7, #11]
			if (variable_index > sizeof(data_pointers)/sizeof(data_pointers[0])) return;
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d837      	bhi.n	80010f2 <_ZN10LocoModule12parse_packetEP6Packet+0x94>
			if (packet->length > 1) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d91c      	bls.n	80010ca <_ZN10LocoModule12parse_packetEP6Packet+0x6c>
				for (int i = 0; i < data_sizes[variable_index]; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	da26      	bge.n	80010f4 <_ZN10LocoModule12parse_packetEP6Packet+0x96>
					data_pointers[variable_index][i] = packet->data[i+1];
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	3306      	adds	r3, #6
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	6859      	ldr	r1, [r3, #4]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	440b      	add	r3, r1
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	440a      	add	r2, r1
 80010be:	7892      	ldrb	r2, [r2, #2]
 80010c0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < data_sizes[variable_index]; i++) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e7e4      	b.n	8001094 <_ZN10LocoModule12parse_packetEP6Packet+0x36>
				}
			} else {
				send_data(variable_index);
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	4619      	mov	r1, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff62 	bl	8000f98 <_ZN10LocoModule9send_dataEh>
 80010d4:	e00e      	b.n	80010f4 <_ZN10LocoModule12parse_packetEP6Packet+0x96>
			}
		} else if (packet->command == WARNING) {
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d007      	beq.n	80010f4 <_ZN10LocoModule12parse_packetEP6Packet+0x96>
//					uint8_t warning_code = error_handler->warnings.front();
//					send_warning(warning_code);
//					error_handler->clear_warning(warning_code);
//				}
//			}
		} else if (packet->command == ERROR) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b20      	cmp	r3, #32
 80010f0:	e000      	b.n	80010f4 <_ZN10LocoModule12parse_packetEP6Packet+0x96>
			if (variable_index > sizeof(data_pointers)/sizeof(data_pointers[0])) return;
 80010f2:	bf00      	nop
//					error_handler->clear_error(error_code);
//				}
//			}
		} else if (packet->command == ACTION_REQUIRED) {
		}
	}
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <_ZN6TPM4009read_dataEv>:
		// Wait for ongoing transmissions to complete
		while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3) {}
	}

	// Read data received over CAN bus
	void read_data() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0208 	add.w	r2, r3, #8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3324      	adds	r3, #36	; 0x24
 8001112:	2100      	movs	r1, #0
 8001114:	f001 fba5 	bl	8002862 <HAL_CAN_GetRxMessage>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf14      	ite	ne
 800111e:	2301      	movne	r3, #1
 8001120:	2300      	moveq	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_ZN6TPM4009read_dataEv+0x30>
			Error_Handler();
 8001128:	f7ff fdda 	bl	8000ce0 <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState)1);
 800112c:	2201      	movs	r2, #1
 800112e:	2120      	movs	r1, #32
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <_ZN6TPM4009read_dataEv+0x44>)
 8001132:	f002 f96a 	bl	800340a <HAL_GPIO_WritePin>
	}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010800 	.word	0x40010800

08001144 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implD1Ev>:
      struct _List_impl
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f97a 	bl	8001446 <_ZNSaISt10_List_nodeIhEED1Ev>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_ZNSt7__cxx1110_List_baseIhSaIhEEC1Ev>:
      _List_base() = default;
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f95d 	bl	8001426 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implC1Ev>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZNSt7__cxx114listIhSaIhEEC1Ev>:
      list() = default;
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffeb 	bl	800115c <_ZNSt7__cxx1110_List_baseIhSaIhEEC1Ev>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZNSt7__cxx114listIhSaIhEED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f95f 	bl	800145e <_ZNSt7__cxx1110_List_baseIhSaIhEED1Ev>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <_ZN12ErrorHandlerC1Ev>:
#include <list>
#include <algorithm>

// IDENTICAL BETWEEN CONTROLBOX AND MAINBOARD

class ErrorHandler {
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <_ZN12ErrorHandlerC1Ev+0x44>)
 80011b8:	461c      	mov	r4, r3
 80011ba:	4615      	mov	r5, r2
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <_ZN12ErrorHandlerC1Ev+0x48>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	332c      	adds	r3, #44	; 0x2c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffcd 	bl	8001176 <_ZNSt7__cxx114listIhSaIhEEC1Ev>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3338      	adds	r3, #56	; 0x38
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc8 	bl	8001176 <_ZNSt7__cxx114listIhSaIhEEC1Ev>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bdb0      	pop	{r4, r5, r7, pc}
 80011f0:	080050f8 	.word	0x080050f8
 80011f4:	080050e8 	.word	0x080050e8

080011f8 <_ZN6TPM400C1Ev>:
class TPM400 {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	711a      	strb	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_CAN_RxFifo0MsgPendingCallback>:
TPM400 motor_controller;
LocoModule module(1, &error_handler);

extern float rpm;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	motor_controller.read_data();
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800121e:	f7ff ff6d 	bl	80010fc <_ZN6TPM4009read_dataEv>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000110 	.word	0x20000110

08001230 <_Z14handle_packetsv>:
void init_modules(UART_HandleTypeDef *_huart) {
	module.huart = _huart;
	start_receiving(module.huart);
}

void handle_packets() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	while (packet_available()) {
 8001236:	f7ff fe39 	bl	8000eac <_Z16packet_availablev>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d014      	beq.n	800126a <_Z14handle_packetsv+0x3a>
		Packet *packet = get_packet();
 8001240:	f7ff fe12 	bl	8000e68 <_Z10get_packetv>
 8001244:	6078      	str	r0, [r7, #4]

		if (packet->address == module.id) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_Z14handle_packetsv+0x44>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d103      	bne.n	8001262 <_Z14handle_packetsv+0x32>
			module.parse_packet(packet);
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <_Z14handle_packetsv+0x44>)
 800125e:	f7ff fefe 	bl	800105e <_ZN10LocoModule12parse_packetEP6Packet>
		}

		clear_packet(packet);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fe0c 	bl	8000e80 <_Z12clear_packetP6Packet>
	while (packet_available()) {
 8001268:	e7e5      	b.n	8001236 <_Z14handle_packetsv+0x6>
	}
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000160 	.word	0x20000160

08001278 <mainboard>:

void mainboard() {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(VARIANT_INDICATOR_GPIO_Port, VARIANT_INDICATOR_Pin)) module.id = 1;
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <mainboard+0x3c>)
 8001282:	f002 f8ab 	bl	80033dc <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <mainboard+0x26>
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <mainboard+0x40>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <mainboard+0x2c>
	else module.id = 2;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <mainboard+0x40>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	601a      	str	r2, [r3, #0]

	//motor_controller.enable_can_control();
	//motor_controller.set_heading(0);

	while (true) {
		handle_packets();
 80012a4:	f7ff ffc4 	bl	8001230 <_Z14handle_packetsv>

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState)((HAL_GetTick()%800)<400));

		// module.actual_speed = module.speed_setpoint;

		module.actual_speed = rpm;
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <mainboard+0x44>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a02      	ldr	r2, [pc, #8]	; (80012b8 <mainboard+0x40>)
 80012ae:	6153      	str	r3, [r2, #20]
		handle_packets();
 80012b0:	e7f8      	b.n	80012a4 <mainboard+0x2c>
 80012b2:	bf00      	nop
 80012b4:	40011000 	.word	0x40011000
 80012b8:	20000160 	.word	0x20000160
 80012bc:	200000a0 	.word	0x200000a0

080012c0 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f8d8 	bl	800147e <_ZNSaISt10_List_nodeIP6PacketEEC1Ev>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fd0a 	bl	8000cea <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZNSaISt10_List_nodeIP6PacketEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f8d4 	bl	8001496 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEED1Ev>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f8d2 	bl	80014aa <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd0d 	bl	8000d28 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE10_List_implD1Ev>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f8f7 	bl	8001514 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f901 	bl	8001536 <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_>:
# define _GLIBCXX20_ONLY(__expr)
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::__remove_return_type
    list<_Tp, _Alloc>::
 800133e:	b590      	push	{r4, r7, lr}
 8001340:	b089      	sub	sp, #36	; 0x24
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
    remove(const value_type& __value)
    {
      size_type __removed __attribute__((__unused__)) = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
      iterator __first = begin();
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f8e1 	bl	8001514 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>
 8001352:	4603      	mov	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
      iterator __last = end();
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f8cc 	bl	80014f4 <_ZNSt7__cxx114listIP6PacketSaIS2_EE3endEv>
 800135c:	4603      	mov	r3, r0
 800135e:	617b      	str	r3, [r7, #20]
      iterator __extra = __last;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
      while (__first != __last)
 8001364:	f107 0214 	add.w	r2, r7, #20
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f8ef 	bl	8001552 <_ZStneRKSt14_List_iteratorIP6PacketES4_>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d035      	beq.n	80013e6 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa8>
	{
	  iterator __next = __first;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60fb      	str	r3, [r7, #12]
	  ++__next;
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f8f8 	bl	8001578 <_ZNSt14_List_iteratorIP6PacketEppEv>
	  if (*__first == __value)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f8d2 	bl	8001536 <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 8001392:	4603      	mov	r3, r0
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01b      	beq.n	80013e0 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa2>
	    {
	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
	      // 526. Is it undefined if a function in the standard changes
	      // in parameters?
	      if (std::__addressof(*__first) != std::__addressof(__value))
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f8c2 	bl	8001536 <_ZNKSt14_List_iteratorIP6PacketEdeEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f8ee 	bl	8001596 <_ZSt11__addressofIP6PacketEPT_RS2_>
 80013ba:	4604      	mov	r4, r0
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f000 f8f4 	bl	80015aa <_ZSt11__addressofIKP6PacketEPT_RS3_>
 80013c2:	4603      	mov	r3, r0
 80013c4:	429c      	cmp	r4, r3
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0x9e>
		{
		  _M_erase(__first);
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f8f2 	bl	80015be <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 80013da:	e001      	b.n	80013e0 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xa2>
		  _GLIBCXX20_ONLY( __removed++ );
		}
	      else
		__extra = __first;
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	613b      	str	r3, [r7, #16]
	    }
	  __first = __next;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	61bb      	str	r3, [r7, #24]
      while (__first != __last)
 80013e4:	e7be      	b.n	8001364 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0x26>
	}
      if (__extra != __last)
 80013e6:	f107 0214 	add.w	r2, r7, #20
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f8ae 	bl	8001552 <_ZStneRKSt14_List_iteratorIP6PacketES4_>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <_ZNSt7__cxx114listIP6PacketSaIS2_EE6removeERKS2_+0xc8>
	{
	  _M_erase(__extra);
 80013fc:	6939      	ldr	r1, [r7, #16]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f8dd 	bl	80015be <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
	  _GLIBCXX20_ONLY( __removed++ );
	}
      return _GLIBCXX20_ONLY( __removed );
 8001404:	bf00      	nop
 8001406:	bf00      	nop
    }
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}

0800140e <_ZNKSt7__cxx114listIP6PacketSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8f7 	bl	800160a <_ZNKSt7__cxx114listIP6PacketSaIS2_EE13_M_node_countEv>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f8f8 	bl	8001624 <_ZNSaISt10_List_nodeIhEEC1Ev>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc57 	bl	8000cea <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_ZNSaISt10_List_nodeIhEED1Ev>:
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f8f4 	bl	800163c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEED1Ev>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZNSt7__cxx1110_List_baseIhSaIhEED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8f2 	bl	8001650 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe68 	bl	8001144 <_ZNSt7__cxx1110_List_baseIhSaIhEE10_List_implD1Ev>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSaISt10_List_nodeIP6PacketEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f907 	bl	800169a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEEC1Ev>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d015      	beq.n	80014ec <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	f000 f8ef 	bl	80016ae <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 80014d0:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f8f9 	bl	80016ca <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>
 80014d8:	4603      	mov	r3, r0
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f8fe 	bl	80016de <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f907 	bl	80016f8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 80014ea:	e7e5      	b.n	80014b8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE8_M_clearEv+0xe>
    }
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZNSt7__cxx114listIP6PacketSaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f906 	bl	8001716 <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZNSt7__cxx114listIP6PacketSaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f8f5 	bl	8001716 <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNKSt14_List_iteratorIP6PacketEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f8b3 	bl	80016ae <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 8001548:	4603      	mov	r3, r0
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_ZStneRKSt14_List_iteratorIP6PacketES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <_ZNSt14_List_iteratorIP6PacketEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
	return *this;
 800158a:	687b      	ldr	r3, [r7, #4]
      }
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_ZSt11__addressofIP6PacketEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <_ZSt11__addressofIKP6PacketEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_ZNSt7__cxx114listIP6PacketSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80015be:	b590      	push	{r4, r7, lr}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f8b0 	bl	8001732 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fc89 	bl	8004eec <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f872 	bl	80016ca <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>
 80015e6:	4604      	mov	r4, r0
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f860 	bl	80016ae <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f000 f873 	bl	80016de <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68f9      	ldr	r1, [r7, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f87b 	bl	80016f8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}

0800160a <_ZNKSt7__cxx114listIP6PacketSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f89c 	bl	8001752 <_ZNKSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_get_sizeEv>
 800161a:	4603      	mov	r3, r0
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZNSaISt10_List_nodeIhEEC1Ev>:
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8cf 	bl	80017d0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEEC1Ev>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEED1Ev>:
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d015      	beq.n	8001692 <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001670:	6938      	ldr	r0, [r7, #16]
 8001672:	f000 f879 	bl	8001768 <_ZNSt10_List_nodeIhE9_M_valptrEv>
 8001676:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f883 	bl	8001784 <_ZNSt7__cxx1110_List_baseIhSaIhEE21_M_get_Node_allocatorEv>
 800167e:	4603      	mov	r3, r0
 8001680:	68f9      	ldr	r1, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f888 	bl	8001798 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__tmp);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f891 	bl	80017b2 <_ZNSt7__cxx1110_List_baseIhSaIhEE11_M_put_nodeEPSt10_List_nodeIhE>
      while (__cur != &_M_impl._M_node)
 8001690:	e7e5      	b.n	800165e <_ZNSt7__cxx1110_List_baseIhSaIhEE8_M_clearEv+0xe>
    }
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_ZNSt10_List_nodeIP6PacketE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3308      	adds	r3, #8
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f892 	bl	80017e4 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE6_M_ptrEv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f886 	bl	80017fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE7destroyIS3_EEvPT_>
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f881 	bl	8001810 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE10deallocateERS4_PS3_j>
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZNSt14_List_iteratorIP6PacketEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <_ZNKSt7__cxx1110_List_baseIP6PacketSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <_ZNSt10_List_nodeIhE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3308      	adds	r3, #8
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f85a 	bl	800182e <_ZN9__gnu_cxx16__aligned_membufIhE6_M_ptrEv>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZNSt7__cxx1110_List_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f84e 	bl	8001846 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE7destroyIhEEvPT_>
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZNSt7__cxx1110_List_baseIhSaIhEE11_M_put_nodeEPSt10_List_nodeIhE>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f849 	bl	800185a <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE10deallocateERS2_PS1_j>
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEEC1Ev>:
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f843 	bl	8001878 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE7_M_addrEv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE7destroyIS3_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <_ZNSt16allocator_traitsISaISt10_List_nodeIP6PacketEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f833 	bl	800188c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE10deallocateEPS4_j>
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZN9__gnu_cxx16__aligned_membufIhE6_M_ptrEv>:
      _M_ptr() noexcept
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f835 	bl	80018a6 <_ZN9__gnu_cxx16__aligned_membufIhE7_M_addrEv>
 800183c:	4603      	mov	r3, r0
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE7destroyIhEEvPT_>:
	destroy(_Up* __p)
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_ZNSt16allocator_traitsISaISt10_List_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f825 	bl	80018ba <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE10deallocateEPS2_j>
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZN9__gnu_cxx16__aligned_membufIP6PacketE7_M_addrEv>:
      _M_addr() noexcept
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP6PacketEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f003 fb23 	bl	8004ee4 <_ZdlPv>
      }
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_ZN9__gnu_cxx16__aligned_membufIhE7_M_addrEv>:
      _M_addr() noexcept
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIhEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80018c6:	68b8      	ldr	r0, [r7, #8]
 80018c8:	f003 fb0c 	bl	8004ee4 <_ZdlPv>
      }
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZN12ErrorHandlerD1Ev>:
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3338      	adds	r3, #56	; 0x38
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fc55 	bl	8001190 <_ZNSt7__cxx114listIhSaIhEED1Ev>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	332c      	adds	r3, #44	; 0x2c
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fc50 	bl	8001190 <_ZNSt7__cxx114listIhSaIhEED1Ev>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZNSt7__cxx114listIP6PacketSaIS2_EED1Ev>:
      ~list() = default;
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fcf7 	bl	80012f8 <_ZNSt7__cxx1110_List_baseIP6PacketSaIS2_EED1Ev>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d117      	bne.n	8001954 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192a:	4293      	cmp	r3, r2
 800192c:	d112      	bne.n	8001954 <_Z41__static_initialization_and_destruction_0ii+0x40>
std::list<Packet*> incoming_packets;
 800192e:	4812      	ldr	r0, [pc, #72]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001930:	f7ff fa13 	bl	8000d5a <_ZNSt7__cxx114listIP6PacketSaIS2_EEC1Ev>
unsigned long last_packet_tick = HAL_GetTick();
 8001934:	f000 fb92 	bl	800205c <HAL_GetTick>
 8001938:	4603      	mov	r3, r0
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800193c:	6013      	str	r3, [r2, #0]
ErrorHandler error_handler;
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001940:	f7ff fc34 	bl	80011ac <_ZN12ErrorHandlerC1Ev>
TPM400 motor_controller;
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001946:	f7ff fc57 	bl	80011f8 <_ZN6TPM400C1Ev>
LocoModule module(1, &error_handler);
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800194c:	2101      	movs	r1, #1
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001950:	f7ff faf0 	bl	8000f34 <_ZN10LocoModuleC1EiP12ErrorHandler>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001960:	4293      	cmp	r3, r2
 8001962:	d105      	bne.n	8001970 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ErrorHandler error_handler;
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001966:	f7ff ffb5 	bl	80018d4 <_ZN12ErrorHandlerD1Ev>
std::list<Packet*> incoming_packets;
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800196c:	f7ff ffc5 	bl	80018fa <_ZNSt7__cxx114listIP6PacketSaIS2_EED1Ev>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000b8 	.word	0x200000b8
 800197c:	200000c8 	.word	0x200000c8
 8001980:	200000cc 	.word	0x200000cc
 8001984:	20000110 	.word	0x20000110
 8001988:	20000160 	.word	0x20000160

0800198c <_GLOBAL__sub_I_packets_sent>:
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
 8001990:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff ffbd 	bl	8001914 <_Z41__static_initialization_and_destruction_0ii>
 800199a:	bd80      	pop	{r7, pc}

0800199c <_GLOBAL__sub_D_packets_sent>:
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
 80019a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ffb5 	bl	8001914 <_Z41__static_initialization_and_destruction_0ii>
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_MspInit+0x5c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_MspInit+0x60>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_MspInit+0x60>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <HAL_ADC_MspInit+0xbc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d122      	bne.n	8001a76 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AMBIENT_TEMP_Pin|MONITORING_24V_Pin;
 8001a60:	2311      	movs	r3, #17
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4819      	ldr	r0, [pc, #100]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001a70:	f001 fb30 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a74:	e026      	b.n	8001ac4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_ADC_MspInit+0xc8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d121      	bne.n	8001ac4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_ADC_MspInit+0xc0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MONITORING_24V_Pin;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MONITORING_24V_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_ADC_MspInit+0xc4>)
 8001ac0:	f001 fb08 	bl	80030d4 <HAL_GPIO_Init>
}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40012800 	.word	0x40012800

08001adc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_CAN_MspInit+0xd0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d153      	bne.n	8001ba4 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b06:	61d3      	str	r3, [r2, #28]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_CAN_MspInit+0xd4>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <HAL_CAN_MspInit+0xd8>)
 8001b42:	f001 fac7 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <HAL_CAN_MspInit+0xd8>)
 8001b5c:	f001 faba 	bl	80030d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_CAN_MspInit+0xdc>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_CAN_MspInit+0xdc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2014      	movs	r0, #20
 8001b8a:	f001 fa6c 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f001 fa85 	bl	800309e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2015      	movs	r0, #21
 8001b9a:	f001 fa64 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b9e:	2015      	movs	r0, #21
 8001ba0:	f001 fa7d 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40006400 	.word	0x40006400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40010000 	.word	0x40010000

08001bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_I2C_MspInit+0x74>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d124      	bne.n	8001c26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_I2C_MspInit+0x7c>)
 8001c0a:	f001 fa63 	bl	80030d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005800 	.word	0x40005800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d12c      	bne.n	8001cb6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CH_A_Pin|CH_B_Pin;
 8001c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ca2:	f001 fa17 	bl	80030d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	201b      	movs	r0, #27
 8001cac:	f001 f9db 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cb0:	201b      	movs	r0, #27
 8001cb2:	f001 f9f4 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010800 	.word	0x40010800

08001ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_TIM_PWM_MspInit+0x34>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_TIM_PWM_MspInit+0x38>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_TIM_PWM_MspInit+0x38>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_TIM_PWM_MspInit+0x38>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_TIM_MspPostInit+0x88>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d12f      	bne.n	8001d88 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_TIM_MspPostInit+0x8c>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d58:	23c0      	movs	r3, #192	; 0xc0
 8001d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_TIM_MspPostInit+0x90>)
 8001d6c:	f001 f9b2 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WS2812_Pin;
 8001d70:	2301      	movs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <HAL_TIM_MspPostInit+0x94>)
 8001d84:	f001 f9a6 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40010c00 	.word	0x40010c00

08001da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <HAL_UART_MspInit+0x70>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d123      	bne.n	8001e08 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dca:	61d3      	str	r3, [r2, #28]
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_UART_MspInit+0x74>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOCO_TX_Pin|LOCO_RX_Pin;
 8001df0:	230c      	movs	r3, #12
 8001df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4619      	mov	r1, r3
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_UART_MspInit+0x78>)
 8001e04:	f001 f966 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010800 	.word	0x40010800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <NMI_Handler+0x4>

08001e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <MemManage_Handler+0x4>

08001e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  indx++;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <SysTick_Handler+0x70>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <SysTick_Handler+0x70>)
 8001e6c:	6013      	str	r3, [r2, #0]

  if (indx == 200)
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <SysTick_Handler+0x70>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2bc8      	cmp	r3, #200	; 0xc8
 8001e74:	d128      	bne.n	8001ec8 <SysTick_Handler+0x68>
  {
	  speed = ((position - oldpos)*5); // encoder speed in clicks per/sec
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <SysTick_Handler+0x74>)
 8001e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <SysTick_Handler+0x78>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	1ad2      	subs	r2, r2, r3
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fa17 	bl	80002c0 <__aeabi_i2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <SysTick_Handler+0x7c>)
 8001e96:	6013      	str	r3, [r2, #0]
	  oldpos = position;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <SysTick_Handler+0x74>)
 8001e9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <SysTick_Handler+0x78>)
 8001ea0:	801a      	strh	r2, [r3, #0]
	  indx = 0;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <SysTick_Handler+0x70>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
	  rpm = (speed / 512) * 60; // Divide by clicks per rotation and then multiply to get minutes
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <SysTick_Handler+0x7c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb0d 	bl	80004d0 <__aeabi_fdiv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4909      	ldr	r1, [pc, #36]	; (8001ee0 <SysTick_Handler+0x80>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fa54 	bl	8000368 <__aeabi_fmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <SysTick_Handler+0x84>)
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f000 f8b6 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000194 	.word	0x20000194
 8001ed4:	20000220 	.word	0x20000220
 8001ed8:	20000190 	.word	0x20000190
 8001edc:	2000009c 	.word	0x2000009c
 8001ee0:	42700000 	.word	0x42700000
 8001ee4:	200000a0 	.word	0x200000a0

08001ee8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP2_PRESENT_Pin);
 8001eec:	2002      	movs	r0, #2
 8001eee:	f001 faa5 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001efe:	f000 fdc1 	bl	8002a84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000224 	.word	0x20000224

08001f0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <CAN1_RX1_IRQHandler+0x10>)
 8001f12:	f000 fdb7 	bl	8002a84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000224 	.word	0x20000224

08001f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD2_Pin);
 8001f24:	2020      	movs	r0, #32
 8001f26:	f001 fa89 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM1_CC_IRQHandler+0x10>)
 8001f36:	f002 fa4c 	bl	80043d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002cc 	.word	0x200002cc

08001f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INDEX_Pin);
 8001f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f4c:	f001 fa76 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f86:	f7ff ffe5 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f002 ffb5 	bl	8004ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8e:	f7fe fb8b 	bl	80006a8 <main>
  bx lr
 8001f92:	4770      	bx	lr
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f9c:	08005158 	.word	0x08005158
  ldr r2, =_sbss
 8001fa0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fa4:	200003a8 	.word	0x200003a8

08001fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_2_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x28>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x28>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f001 f847 	bl	8003050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fcf0 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f85f 	bl	80030ba <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f001 f827 	bl	8003066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000004 	.word	0x20000004
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x1c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_IncTick+0x20>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000398 	.word	0x20000398

0800205c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <HAL_GetTick+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000398 	.word	0x20000398

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fff0 	bl	800205c <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffe0 	bl	800205c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0be      	b.n	8002258 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fc8a 	bl	8001a10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9ab 	bl	8002458 <ADC_ConversionStop_Disable>
 8002102:	4603      	mov	r3, r0
 8002104:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8099 	bne.w	8002246 <HAL_ADC_Init+0x18e>
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8095 	bne.w	8002246 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002124:	f023 0302 	bic.w	r3, r3, #2
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002138:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7b1b      	ldrb	r3, [r3, #12]
 800213e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002140:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4313      	orrs	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002150:	d003      	beq.n	800215a <HAL_ADC_Init+0xa2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_ADC_Init+0xa8>
 800215a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215e:	e000      	b.n	8002162 <HAL_ADC_Init+0xaa>
 8002160:	2300      	movs	r3, #0
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7d1b      	ldrb	r3, [r3, #20]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d119      	bne.n	80021a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7b1b      	ldrb	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	3b01      	subs	r3, #1
 800217e:	035a      	lsls	r2, r3, #13
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e00b      	b.n	80021a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_ADC_Init+0x1a8>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d003      	beq.n	80021de <HAL_ADC_Init+0x126>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d104      	bne.n	80021e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	051b      	lsls	r3, r3, #20
 80021e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_ADC_Init+0x1ac>)
 8002204:	4013      	ands	r3, r2
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d10b      	bne.n	8002224 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002222:	e018      	b.n	8002256 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f023 0312 	bic.w	r3, r3, #18
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002244:	e007      	b.n	8002256 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	ffe1f7fd 	.word	0xffe1f7fd
 8002264:	ff1f0efe 	.word	0xff1f0efe

08002268 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x20>
 8002284:	2302      	movs	r3, #2
 8002286:	e0dc      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1da>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d81c      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b05      	subs	r3, #5
 80022aa:	221f      	movs	r2, #31
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4019      	ands	r1, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b05      	subs	r3, #5
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
 80022d0:	e03c      	b.n	800234c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d81c      	bhi.n	8002314 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b23      	subs	r3, #35	; 0x23
 80022ec:	221f      	movs	r2, #31
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4019      	ands	r1, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b23      	subs	r3, #35	; 0x23
 8002306:	fa00 f203 	lsl.w	r2, r0, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
 8002312:	e01b      	b.n	800234c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b41      	subs	r3, #65	; 0x41
 8002326:	221f      	movs	r2, #31
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	4019      	ands	r1, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b41      	subs	r3, #65	; 0x41
 8002340:	fa00 f203 	lsl.w	r2, r0, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b09      	cmp	r3, #9
 8002352:	d91c      	bls.n	800238e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	3b1e      	subs	r3, #30
 8002366:	2207      	movs	r2, #7
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	4019      	ands	r1, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6898      	ldr	r0, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	3b1e      	subs	r3, #30
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	e019      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6919      	ldr	r1, [r3, #16]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	2207      	movs	r2, #7
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4019      	ands	r1, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6898      	ldr	r0, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d003      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ce:	2b11      	cmp	r3, #17
 80023d0:	d132      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_ADC_ConfigChannel+0x1e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d125      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d126      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d11a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_ADC_ConfigChannel+0x1e8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_ADC_ConfigChannel+0x1ec>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	0c9a      	lsrs	r2, r3, #18
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_ConfigChannel+0x1b2>
 8002426:	e007      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40012400 	.word	0x40012400
 8002450:	20000004 	.word	0x20000004
 8002454:	431bde83 	.word	0x431bde83

08002458 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12e      	bne.n	80024d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002482:	f7ff fdeb 	bl	800205c <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002488:	e01b      	b.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800248a:	f7ff fde7 	bl	800205c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d914      	bls.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10d      	bne.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e007      	b.n	80024d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d0dc      	beq.n	800248a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0ed      	b.n	80026c8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff faef 	bl	8001adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800250e:	f7ff fda5 	bl	800205c <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002514:	e012      	b.n	800253c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002516:	f7ff fda1 	bl	800205c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b0a      	cmp	r3, #10
 8002522:	d90b      	bls.n	800253c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2205      	movs	r2, #5
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0c5      	b.n	80026c8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0e5      	beq.n	8002516 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0202 	bic.w	r2, r2, #2
 8002558:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800255a:	f7ff fd7f 	bl	800205c <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002560:	e012      	b.n	8002588 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002562:	f7ff fd7b 	bl	800205c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b0a      	cmp	r3, #10
 800256e:	d90b      	bls.n	8002588 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2205      	movs	r2, #5
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e09f      	b.n	80026c8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e5      	bne.n	8002562 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7e1b      	ldrb	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e5b      	ldrb	r3, [r3, #25]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d108      	bne.n	80025da <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e007      	b.n	80025ea <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7e9b      	ldrb	r3, [r3, #26]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d108      	bne.n	8002604 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0220 	bic.w	r2, r2, #32
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7edb      	ldrb	r3, [r3, #27]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0210 	bic.w	r2, r2, #16
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e007      	b.n	800263e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0210 	orr.w	r2, r2, #16
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7f1b      	ldrb	r3, [r3, #28]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0208 	orr.w	r2, r2, #8
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e007      	b.n	8002668 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0208 	bic.w	r2, r2, #8
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7f5b      	ldrb	r3, [r3, #29]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d108      	bne.n	8002682 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0204 	orr.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e007      	b.n	8002692 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d003      	beq.n	80026f6 <HAL_CAN_ConfigFilter+0x26>
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f040 80aa 	bne.w	800284a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	401a      	ands	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d123      	bne.n	8002778 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002752:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3248      	adds	r2, #72	; 0x48
 8002758:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800276c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800276e:	6979      	ldr	r1, [r7, #20]
 8002770:	3348      	adds	r3, #72	; 0x48
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d122      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	431a      	orrs	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3248      	adds	r2, #72	; 0x48
 80027a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027e0:	e007      	b.n	80027f2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	401a      	ands	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800280c:	e007      	b.n	800281e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	431a      	orrs	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800283c:	f023 0201 	bic.w	r2, r3, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e006      	b.n	8002858 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002876:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d003      	beq.n	8002886 <HAL_CAN_GetRxMessage+0x24>
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 80f3 	bne.w	8002a6c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10e      	bne.n	80028aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e7      	b.n	8002a7a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0d8      	b.n	8002a7a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	331b      	adds	r3, #27
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0204 	and.w	r2, r3, #4
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	331b      	adds	r3, #27
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0d5b      	lsrs	r3, r3, #21
 80028f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	331b      	adds	r3, #27
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0202 	and.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	331b      	adds	r3, #27
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	331b      	adds	r3, #27
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b2da      	uxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	4413      	add	r3, r2
 8002996:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0a1a      	lsrs	r2, r3, #8
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0c1a      	lsrs	r2, r3, #16
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	3302      	adds	r3, #2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e1a      	lsrs	r2, r3, #24
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	3303      	adds	r3, #3
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3304      	adds	r3, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0a1a      	lsrs	r2, r3, #8
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	3305      	adds	r3, #5
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0c1a      	lsrs	r2, r3, #16
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3306      	adds	r3, #6
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e1a      	lsrs	r2, r3, #24
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	e007      	b.n	8002a68 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e006      	b.n	8002a7a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d07c      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f983 	bl	8002df2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002aec:	e016      	b.n	8002b1c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e00c      	b.n	8002b1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e002      	b.n	8002b1c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f986 	bl	8002e28 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f962 	bl	8002e04 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b40:	e016      	b.n	8002b70 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e00c      	b.n	8002b70 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	e002      	b.n	8002b70 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f965 	bl	8002e3a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f941 	bl	8002e16 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b94:	e016      	b.n	8002bc4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	e00c      	b.n	8002bc4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	e002      	b.n	8002bc4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f944 	bl	8002e4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f92a 	bl	8002e5e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe faf6 	bl	8001214 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2208      	movs	r2, #8
 8002c66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f901 	bl	8002e70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd fcbe 	bl	8000608 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f8ea 	bl	8002e82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8e2 	bl	8002e94 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07b      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d072      	beq.n	8002dca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d043      	beq.n	8002dca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03e      	beq.n	8002dca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d52:	2b60      	cmp	r3, #96	; 0x60
 8002d54:	d02b      	beq.n	8002dae <HAL_CAN_IRQHandler+0x32a>
 8002d56:	2b60      	cmp	r3, #96	; 0x60
 8002d58:	d82e      	bhi.n	8002db8 <HAL_CAN_IRQHandler+0x334>
 8002d5a:	2b50      	cmp	r3, #80	; 0x50
 8002d5c:	d022      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x320>
 8002d5e:	2b50      	cmp	r3, #80	; 0x50
 8002d60:	d82a      	bhi.n	8002db8 <HAL_CAN_IRQHandler+0x334>
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d019      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x316>
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d826      	bhi.n	8002db8 <HAL_CAN_IRQHandler+0x334>
 8002d6a:	2b30      	cmp	r3, #48	; 0x30
 8002d6c:	d010      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x30c>
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d822      	bhi.n	8002db8 <HAL_CAN_IRQHandler+0x334>
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d002      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x2f8>
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d005      	beq.n	8002d86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d7a:	e01d      	b.n	8002db8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d84:	e019      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d8e:	e014      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d98:	e00f      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da2:	e00a      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dac:	e005      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db6:	e000      	b.n	8002dba <HAL_CAN_IRQHandler+0x336>
            break;
 8002db8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f85e 	bl	8002ea6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <__NVIC_EnableIRQ+0x34>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	210f      	movs	r1, #15
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f7ff ff90 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff2d 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003078:	f7ff ff42 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 800307c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff90 	bl	8002fa8 <NVIC_EncodePriority>
 8003088:	4602      	mov	r2, r0
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff5f 	bl	8002f54 <__NVIC_SetPriority>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff35 	bl	8002f1c <__NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ffa2 	bl	800300c <SysTick_Config>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b08b      	sub	sp, #44	; 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e169      	b.n	80033bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e8:	2201      	movs	r2, #1
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8158 	bne.w	80033b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a9a      	ldr	r2, [pc, #616]	; (8003374 <HAL_GPIO_Init+0x2a0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d05e      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003110:	4a98      	ldr	r2, [pc, #608]	; (8003374 <HAL_GPIO_Init+0x2a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d875      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003116:	4a98      	ldr	r2, [pc, #608]	; (8003378 <HAL_GPIO_Init+0x2a4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d058      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 800311c:	4a96      	ldr	r2, [pc, #600]	; (8003378 <HAL_GPIO_Init+0x2a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d86f      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003122:	4a96      	ldr	r2, [pc, #600]	; (800337c <HAL_GPIO_Init+0x2a8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d052      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003128:	4a94      	ldr	r2, [pc, #592]	; (800337c <HAL_GPIO_Init+0x2a8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d869      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800312e:	4a94      	ldr	r2, [pc, #592]	; (8003380 <HAL_GPIO_Init+0x2ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04c      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003134:	4a92      	ldr	r2, [pc, #584]	; (8003380 <HAL_GPIO_Init+0x2ac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d863      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800313a:	4a92      	ldr	r2, [pc, #584]	; (8003384 <HAL_GPIO_Init+0x2b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d046      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003140:	4a90      	ldr	r2, [pc, #576]	; (8003384 <HAL_GPIO_Init+0x2b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d85d      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d82a      	bhi.n	80031a0 <HAL_GPIO_Init+0xcc>
 800314a:	2b12      	cmp	r3, #18
 800314c:	d859      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_GPIO_Init+0x80>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031bb 	.word	0x080031bb
 8003160:	080031fd 	.word	0x080031fd
 8003164:	08003203 	.word	0x08003203
 8003168:	08003203 	.word	0x08003203
 800316c:	08003203 	.word	0x08003203
 8003170:	08003203 	.word	0x08003203
 8003174:	08003203 	.word	0x08003203
 8003178:	08003203 	.word	0x08003203
 800317c:	08003203 	.word	0x08003203
 8003180:	08003203 	.word	0x08003203
 8003184:	08003203 	.word	0x08003203
 8003188:	08003203 	.word	0x08003203
 800318c:	08003203 	.word	0x08003203
 8003190:	08003203 	.word	0x08003203
 8003194:	08003203 	.word	0x08003203
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	4a79      	ldr	r2, [pc, #484]	; (8003388 <HAL_GPIO_Init+0x2b4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a6:	e02c      	b.n	8003202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e029      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e024      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	3308      	adds	r3, #8
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e01f      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	330c      	adds	r3, #12
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e01a      	b.n	8003204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d6:	2304      	movs	r3, #4
 80031d8:	623b      	str	r3, [r7, #32]
          break;
 80031da:	e013      	b.n	8003204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e4:	2308      	movs	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	611a      	str	r2, [r3, #16]
          break;
 80031ee:	e009      	b.n	8003204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f0:	2308      	movs	r3, #8
 80031f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	615a      	str	r2, [r3, #20]
          break;
 80031fa:	e003      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x130>
          break;
 8003202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	; 0xff
 8003208:	d801      	bhi.n	800320e <HAL_GPIO_Init+0x13a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_Init+0x13e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	; 0xff
 8003218:	d802      	bhi.n	8003220 <HAL_GPIO_Init+0x14c>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x152>
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	3b08      	subs	r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	210f      	movs	r1, #15
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80b1 	beq.w	80033b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_GPIO_Init+0x2b8>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a4c      	ldr	r2, [pc, #304]	; (800338c <HAL_GPIO_Init+0x2b8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_GPIO_Init+0x2b8>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800326c:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a40      	ldr	r2, [pc, #256]	; (8003394 <HAL_GPIO_Init+0x2c0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_GPIO_Init+0x1ec>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_GPIO_Init+0x2c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00d      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3e      	ldr	r2, [pc, #248]	; (800339c <HAL_GPIO_Init+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <HAL_GPIO_Init+0x1e4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <HAL_GPIO_Init+0x2cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_GPIO_Init+0x1e0>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e004      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e002      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032c0:	2300      	movs	r3, #0
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	f002 0203 	and.w	r2, r2, #3
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4093      	lsls	r3, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d2:	492f      	ldr	r1, [pc, #188]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032ec:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	492c      	ldr	r1, [pc, #176]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4928      	ldr	r1, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4922      	ldr	r1, [pc, #136]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	43db      	mvns	r3, r3
 800332a:	491e      	ldr	r1, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800332c:	4013      	ands	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4918      	ldr	r1, [pc, #96]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	43db      	mvns	r3, r3
 8003352:	4914      	ldr	r1, [pc, #80]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003354:	4013      	ands	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
 8003370:	e021      	b.n	80033b6 <HAL_GPIO_Init+0x2e2>
 8003372:	bf00      	nop
 8003374:	10320000 	.word	0x10320000
 8003378:	10310000 	.word	0x10310000
 800337c:	10220000 	.word	0x10220000
 8003380:	10210000 	.word	0x10210000
 8003384:	10120000 	.word	0x10120000
 8003388:	10110000 	.word	0x10110000
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	40010800 	.word	0x40010800
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40011000 	.word	0x40011000
 80033a0:	40011400 	.word	0x40011400
 80033a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_GPIO_Init+0x304>)
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <HAL_GPIO_Init+0x304>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f ae8e 	bne.w	80030e8 <HAL_GPIO_Init+0x14>
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	372c      	adds	r7, #44	; 0x2c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
 8003416:	4613      	mov	r3, r2
 8003418:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800341a:	787b      	ldrb	r3, [r7, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003426:	e003      	b.n	8003430 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	041a      	lsls	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	611a      	str	r2, [r3, #16]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
	...

0800343c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd f90e 	bl	800067c <HAL_GPIO_EXTI_Callback>
  }
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fb92 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f000 fce4 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	; (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e26c      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8087 	beq.w	8003822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003714:	4b92      	ldr	r3, [pc, #584]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00c      	beq.n	800373a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d112      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
 800372c:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d10b      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373a:	4b89      	ldr	r3, [pc, #548]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06c      	beq.n	8003820 <HAL_RCC_OscConfig+0x12c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d168      	bne.n	8003820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e246      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x76>
 800375c:	4b80      	ldr	r3, [pc, #512]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7f      	ldr	r2, [pc, #508]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e02e      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x98>
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b78      	ldr	r3, [pc, #480]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0xbc>
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a71      	ldr	r2, [pc, #452]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 80037b0:	4b6b      	ldr	r3, [pc, #428]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6a      	ldr	r2, [pc, #424]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b68      	ldr	r3, [pc, #416]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a67      	ldr	r2, [pc, #412]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fc44 	bl	800205c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fc40 	bl	800205c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1fa      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xe4>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fc30 	bl	800205c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe fc2c 	bl	800205c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1e6      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x10c>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800382e:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x18c>
 8003846:	4b46      	ldr	r3, [pc, #280]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x176>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1ba      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4939      	ldr	r1, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x270>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fbe5 	bl	800205c <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003896:	f7fe fbe1 	bl	800205c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e19b      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4927      	ldr	r1, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCC_OscConfig+0x270>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fbc4 	bl	800205c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe fbc0 	bl	800205c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e17a      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03a      	beq.n	8003978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d019      	beq.n	800393e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_RCC_OscConfig+0x274>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7fe fba4 	bl	800205c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe fba0 	bl	800205c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e15a      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f000 fad8 	bl	8003eec <RCC_Delay>
 800393c:	e01c      	b.n	8003978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_RCC_OscConfig+0x274>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7fe fb8a 	bl	800205c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394a:	e00f      	b.n	800396c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394c:	f7fe fb86 	bl	800205c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d908      	bls.n	800396c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e140      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	42420000 	.word	0x42420000
 8003968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b9e      	ldr	r3, [pc, #632]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e9      	bne.n	800394c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a6 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b97      	ldr	r3, [pc, #604]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4b94      	ldr	r3, [pc, #592]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a93      	ldr	r2, [pc, #588]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	61d3      	str	r3, [r2, #28]
 80039a2:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b8e      	ldr	r3, [pc, #568]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d118      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b8b      	ldr	r3, [pc, #556]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a8a      	ldr	r2, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7fe fb47 	bl	800205c <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d2:	f7fe fb43 	bl	800205c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0fd      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x312>
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a7a      	ldr	r2, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	e02d      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x334>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	e01c      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCC_OscConfig+0x356>
 8003a30:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a6c      	ldr	r2, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	f043 0304 	orr.w	r3, r3, #4
 8003a3a:	6213      	str	r3, [r2, #32]
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a69      	ldr	r2, [pc, #420]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	e00b      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a66      	ldr	r2, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d015      	beq.n	8003a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe faf7 	bl	800205c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe faf3 	bl	800205c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0ab      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ee      	beq.n	8003a72 <HAL_RCC_OscConfig+0x37e>
 8003a94:	e014      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a96:	f7fe fae1 	bl	800205c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe fadd 	bl	800205c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e095      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ee      	bne.n	8003a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4a47      	ldr	r2, [pc, #284]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8081 	beq.w	8003bde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d061      	beq.n	8003bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d146      	bne.n	8003b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe fab1 	bl	800205c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe faad 	bl	800205c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e067      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d108      	bne.n	8003b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	492d      	ldr	r1, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a19      	ldr	r1, [r3, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	4927      	ldr	r1, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe fa81 	bl	800205c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fe fa7d 	bl	800205c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e037      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x46a>
 8003b7c:	e02f      	b.n	8003bde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fa6a 	bl	800205c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fa66 	bl	800205c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e020      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x498>
 8003baa:	e018      	b.n	8003bde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e013      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420060 	.word	0x42420060

08003bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0d0      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	4965      	ldr	r1, [pc, #404]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d040      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d115      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e073      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e06b      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4936      	ldr	r1, [pc, #216]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe f9ba 	bl	800205c <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fe f9b6 	bl	800205c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e053      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d210      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 0207 	bic.w	r2, r3, #7
 8003d2a:	4922      	ldr	r1, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490a      	ldr	r1, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe f918 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40022000 	.word	0x40022000
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	08005130 	.word	0x08005130
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b490      	push	{r4, r7}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dce:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd0:	1d3c      	adds	r4, r7, #4
 8003dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dd8:	f240 2301 	movw	r3, #513	; 0x201
 8003ddc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x46>
 8003e06:	e02d      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0a:	623b      	str	r3, [r7, #32]
      break;
 8003e0c:	e02d      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	0c9b      	lsrs	r3, r3, #18
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c5b      	lsrs	r3, r3, #17
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e46:	fb02 f203 	mul.w	r2, r2, r3
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e004      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	623b      	str	r3, [r7, #32]
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e66:	623b      	str	r3, [r7, #32]
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc90      	pop	{r4, r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	08005120 	.word	0x08005120
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	003d0900 	.word	0x003d0900

08003e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff2 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08005140 	.word	0x08005140

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffde 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0adb      	lsrs	r3, r3, #11
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	08005140 	.word	0x08005140

08003eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <RCC_Delay+0x34>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <RCC_Delay+0x38>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	0a5b      	lsrs	r3, r3, #9
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f08:	bf00      	nop
  }
  while (Delay --);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	60fa      	str	r2, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f9      	bne.n	8003f08 <RCC_Delay+0x1c>
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	20000004 	.word	0x20000004
 8003f24:	10624dd3 	.word	0x10624dd3

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d07d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f48:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4a4b      	ldr	r2, [pc, #300]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	61d3      	str	r3, [r2, #28]
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d118      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f88:	f7fe f868 	bl	800205c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fe f864 	bl	800205c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e06d      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02e      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d027      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe f833 	bl	800205c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fe f82f 	bl	800205c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e036      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ee      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4917      	ldr	r1, [pc, #92]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	4313      	orrs	r3, r2
 800402c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	490b      	ldr	r1, [pc, #44]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	40007000 	.word	0x40007000
 8004090:	42420440 	.word	0x42420440

08004094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e041      	b.n	800412a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fe06 	bl	8001ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 fb68 	bl	80047a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e093      	b.n	800426e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fd6e 	bl	8001c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fb0e 	bl	80047a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	f023 0303 	bic.w	r3, r3, #3
 80041b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	4313      	orrs	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041d2:	f023 030c 	bic.w	r3, r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4313      	orrs	r3, r2
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	4313      	orrs	r3, r2
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004210:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	4313      	orrs	r3, r2
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004286:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800428e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004296:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800429e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d110      	bne.n	80042c8 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d102      	bne.n	80042b2 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ac:	7b7b      	ldrb	r3, [r7, #13]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e089      	b.n	80043ca <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c6:	e031      	b.n	800432c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d110      	bne.n	80042f0 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	7bbb      	ldrb	r3, [r7, #14]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042d4:	7b3b      	ldrb	r3, [r7, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e075      	b.n	80043ca <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ee:	e01d      	b.n	800432c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042fc:	7b7b      	ldrb	r3, [r7, #13]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004302:	7b3b      	ldrb	r3, [r7, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e05e      	b.n	80043ca <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_Encoder_Start_IT+0xc4>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d010      	beq.n	800435a <HAL_TIM_Encoder_Start_IT+0xe4>
 8004338:	e01f      	b.n	800437a <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2201      	movs	r2, #1
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fc1a 	bl	8004b7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0202 	orr.w	r2, r2, #2
 8004356:	60da      	str	r2, [r3, #12]
      break;
 8004358:	e02e      	b.n	80043b8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2201      	movs	r2, #1
 8004360:	2104      	movs	r1, #4
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fc0a 	bl	8004b7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0204 	orr.w	r2, r2, #4
 8004376:	60da      	str	r2, [r3, #12]
      break;
 8004378:	e01e      	b.n	80043b8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fbfa 	bl	8004b7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	2104      	movs	r1, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fbf3 	bl	8004b7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0202 	orr.w	r2, r2, #2
 80043a4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0204 	orr.w	r2, r2, #4
 80043b4:	60da      	str	r2, [r3, #12]
      break;
 80043b6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d122      	bne.n	800442e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d11b      	bne.n	800442e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0202 	mvn.w	r2, #2
 80043fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc f913 	bl	8000640 <HAL_TIM_IC_CaptureCallback>
 800441a:	e005      	b.n	8004428 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f9a8 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9ae 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0204 	mvn.w	r2, #4
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc f8e9 	bl	8000640 <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f97e 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f984 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11b      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0208 	mvn.w	r2, #8
 80044a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc f8bf 	bl	8000640 <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f954 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f95a 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d122      	bne.n	800452a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d11b      	bne.n	800452a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0210 	mvn.w	r2, #16
 80044fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2208      	movs	r2, #8
 8004500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc f895 	bl	8000640 <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f92a 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f930 	bl	8004784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10e      	bne.n	8004556 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0201 	mvn.w	r2, #1
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f905 	bl	8004760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d10e      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb88 	bl	8004c92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8f4 	bl	8004796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0220 	mvn.w	r2, #32
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb53 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0ac      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x174>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b0c      	cmp	r3, #12
 800460a:	f200 809f 	bhi.w	800474c <HAL_TIM_PWM_ConfigChannel+0x168>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004649 	.word	0x08004649
 8004618:	0800474d 	.word	0x0800474d
 800461c:	0800474d 	.word	0x0800474d
 8004620:	0800474d 	.word	0x0800474d
 8004624:	08004689 	.word	0x08004689
 8004628:	0800474d 	.word	0x0800474d
 800462c:	0800474d 	.word	0x0800474d
 8004630:	0800474d 	.word	0x0800474d
 8004634:	080046cb 	.word	0x080046cb
 8004638:	0800474d 	.word	0x0800474d
 800463c:	0800474d 	.word	0x0800474d
 8004640:	0800474d 	.word	0x0800474d
 8004644:	0800470b 	.word	0x0800470b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f90c 	bl	800486c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0208 	orr.w	r2, r2, #8
 8004662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6999      	ldr	r1, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	619a      	str	r2, [r3, #24]
      break;
 8004686:	e062      	b.n	800474e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f952 	bl	8004938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6999      	ldr	r1, [r3, #24]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	619a      	str	r2, [r3, #24]
      break;
 80046c8:	e041      	b.n	800474e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f99b 	bl	8004a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0208 	orr.w	r2, r2, #8
 80046e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0204 	bic.w	r2, r2, #4
 80046f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69d9      	ldr	r1, [r3, #28]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	61da      	str	r2, [r3, #28]
      break;
 8004708:	e021      	b.n	800474e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f9e5 	bl	8004ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69d9      	ldr	r1, [r3, #28]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	021a      	lsls	r2, r3, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	61da      	str	r2, [r3, #28]
      break;
 800474a:	e000      	b.n	800474e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800474c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a26      	ldr	r2, [pc, #152]	; (8004864 <TIM_Base_SetConfig+0xbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a25      	ldr	r2, [pc, #148]	; (8004868 <TIM_Base_SetConfig+0xc0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d108      	bne.n	80047ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <TIM_Base_SetConfig+0xbc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <TIM_Base_SetConfig+0xc0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d103      	bne.n	8004850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	615a      	str	r2, [r3, #20]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800

0800486c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 0302 	bic.w	r3, r3, #2
 80048b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <TIM_OC1_SetConfig+0xc8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10c      	bne.n	80048e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0308 	bic.w	r3, r3, #8
 80048ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a13      	ldr	r2, [pc, #76]	; (8004934 <TIM_OC1_SetConfig+0xc8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d111      	bne.n	800490e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	621a      	str	r2, [r3, #32]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00

08004938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0210 	bic.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0320 	bic.w	r3, r3, #32
 8004982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <TIM_OC2_SetConfig+0xd0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10d      	bne.n	80049b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <TIM_OC2_SetConfig+0xd0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d113      	bne.n	80049e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	40012c00 	.word	0x40012c00

08004a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <TIM_OC3_SetConfig+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10d      	bne.n	8004a86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <TIM_OC3_SetConfig+0xd0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d113      	bne.n	8004ab6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00

08004ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <TIM_OC4_SetConfig+0x98>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d109      	bne.n	8004b54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00

08004b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2201      	movs	r2, #1
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e046      	b.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d009      	beq.n	8004c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d10c      	bne.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e03f      	b.n	8004d36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd f868 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f86d 	bl	8004dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d130      	bne.n	8004dba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Transmit_IT+0x26>
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e029      	b.n	8004dbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Transmit_IT+0x38>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e022      	b.n	8004dbc <HAL_UART_Transmit_IT+0x7e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2221      	movs	r2, #33	; 0x21
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004db4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
	...

08004dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e02:	f023 030c 	bic.w	r3, r3, #12
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <UART_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7ff f848 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	e002      	b.n	8004e3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7ff f830 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8004e3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009a      	lsls	r2, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <UART_SetConfig+0x118>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	0119      	lsls	r1, r3, #4
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009a      	lsls	r2, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <UART_SetConfig+0x118>)
 8004e76:	fba3 0302 	umull	r0, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2064      	movs	r0, #100	; 0x64
 8004e7e:	fb00 f303 	mul.w	r3, r0, r3
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	3332      	adds	r3, #50	; 0x32
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <UART_SetConfig+0x118>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e94:	4419      	add	r1, r3
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <UART_SetConfig+0x118>)
 8004eae:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2064      	movs	r0, #100	; 0x64
 8004eb6:	fb00 f303 	mul.w	r3, r0, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	3332      	adds	r3, #50	; 0x32
 8004ec0:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <UART_SetConfig+0x118>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40013800 	.word	0x40013800
 8004ee0:	51eb851f 	.word	0x51eb851f

08004ee4 <_ZdlPv>:
 8004ee4:	f000 b82c 	b.w	8004f40 <free>

08004ee8 <_ZdlPvj>:
 8004ee8:	f7ff bffc 	b.w	8004ee4 <_ZdlPv>

08004eec <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8004eec:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	4770      	bx	lr
	...

08004ef8 <__libc_init_array>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	2600      	movs	r6, #0
 8004efc:	4d0c      	ldr	r5, [pc, #48]	; (8004f30 <__libc_init_array+0x38>)
 8004efe:	4c0d      	ldr	r4, [pc, #52]	; (8004f34 <__libc_init_array+0x3c>)
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	d109      	bne.n	8004f1c <__libc_init_array+0x24>
 8004f08:	f000 f884 	bl	8005014 <_init>
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	4d0a      	ldr	r5, [pc, #40]	; (8004f38 <__libc_init_array+0x40>)
 8004f10:	4c0a      	ldr	r4, [pc, #40]	; (8004f3c <__libc_init_array+0x44>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	42a6      	cmp	r6, r4
 8004f18:	d105      	bne.n	8004f26 <__libc_init_array+0x2e>
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f20:	4798      	blx	r3
 8004f22:	3601      	adds	r6, #1
 8004f24:	e7ee      	b.n	8004f04 <__libc_init_array+0xc>
 8004f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2a:	4798      	blx	r3
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	e7f2      	b.n	8004f16 <__libc_init_array+0x1e>
 8004f30:	08005148 	.word	0x08005148
 8004f34:	08005148 	.word	0x08005148
 8004f38:	08005148 	.word	0x08005148
 8004f3c:	08005150 	.word	0x08005150

08004f40 <free>:
 8004f40:	4b02      	ldr	r3, [pc, #8]	; (8004f4c <free+0xc>)
 8004f42:	4601      	mov	r1, r0
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	f000 b80b 	b.w	8004f60 <_free_r>
 8004f4a:	bf00      	nop
 8004f4c:	20000010 	.word	0x20000010

08004f50 <memset>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	4402      	add	r2, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d100      	bne.n	8004f5a <memset+0xa>
 8004f58:	4770      	bx	lr
 8004f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5e:	e7f9      	b.n	8004f54 <memset+0x4>

08004f60 <_free_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4605      	mov	r5, r0
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d043      	beq.n	8004ff0 <_free_r+0x90>
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f0c      	subs	r4, r1, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfb8      	it	lt
 8004f72:	18e4      	addlt	r4, r4, r3
 8004f74:	f000 f840 	bl	8004ff8 <__malloc_lock>
 8004f78:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <_free_r+0x94>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	b933      	cbnz	r3, 8004f8e <_free_r+0x2e>
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6014      	str	r4, [r2, #0]
 8004f84:	4628      	mov	r0, r5
 8004f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f8a:	f000 b83b 	b.w	8005004 <__malloc_unlock>
 8004f8e:	42a3      	cmp	r3, r4
 8004f90:	d90a      	bls.n	8004fa8 <_free_r+0x48>
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	1862      	adds	r2, r4, r1
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bf01      	itttt	eq
 8004f9a:	681a      	ldreq	r2, [r3, #0]
 8004f9c:	685b      	ldreq	r3, [r3, #4]
 8004f9e:	1852      	addeq	r2, r2, r1
 8004fa0:	6022      	streq	r2, [r4, #0]
 8004fa2:	6063      	str	r3, [r4, #4]
 8004fa4:	6004      	str	r4, [r0, #0]
 8004fa6:	e7ed      	b.n	8004f84 <_free_r+0x24>
 8004fa8:	461a      	mov	r2, r3
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	b10b      	cbz	r3, 8004fb2 <_free_r+0x52>
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	d9fa      	bls.n	8004fa8 <_free_r+0x48>
 8004fb2:	6811      	ldr	r1, [r2, #0]
 8004fb4:	1850      	adds	r0, r2, r1
 8004fb6:	42a0      	cmp	r0, r4
 8004fb8:	d10b      	bne.n	8004fd2 <_free_r+0x72>
 8004fba:	6820      	ldr	r0, [r4, #0]
 8004fbc:	4401      	add	r1, r0
 8004fbe:	1850      	adds	r0, r2, r1
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	6011      	str	r1, [r2, #0]
 8004fc4:	d1de      	bne.n	8004f84 <_free_r+0x24>
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4401      	add	r1, r0
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	6053      	str	r3, [r2, #4]
 8004fd0:	e7d8      	b.n	8004f84 <_free_r+0x24>
 8004fd2:	d902      	bls.n	8004fda <_free_r+0x7a>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	e7d4      	b.n	8004f84 <_free_r+0x24>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	1821      	adds	r1, r4, r0
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	bf01      	itttt	eq
 8004fe2:	6819      	ldreq	r1, [r3, #0]
 8004fe4:	685b      	ldreq	r3, [r3, #4]
 8004fe6:	1809      	addeq	r1, r1, r0
 8004fe8:	6021      	streq	r1, [r4, #0]
 8004fea:	6063      	str	r3, [r4, #4]
 8004fec:	6054      	str	r4, [r2, #4]
 8004fee:	e7c9      	b.n	8004f84 <_free_r+0x24>
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000198 	.word	0x20000198

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f000 b809 	b.w	8005010 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200003a0 	.word	0x200003a0

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f000 b804 	b.w	8005012 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200003a0 	.word	0x200003a0

08005010 <__retarget_lock_acquire_recursive>:
 8005010:	4770      	bx	lr

08005012 <__retarget_lock_release_recursive>:
 8005012:	4770      	bx	lr

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
